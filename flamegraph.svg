<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1398" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1381.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1381.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1301" width="0.5848%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1285" width="0.5848%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1269" width="0.5848%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1253" width="0.5848%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1237" width="0.5848%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1221" width="0.5848%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1205" width="0.5848%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="0.0000%" y="1189" width="0.5848%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="1199.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.58%)</title><rect x="0.5848%" y="1301" width="0.5848%" height="15" fill="rgb(218,30,26)"/><text x="0.8348%" y="1311.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.58%)</title><rect x="0.5848%" y="1285" width="0.5848%" height="15" fill="rgb(220,122,19)"/><text x="0.8348%" y="1295.50"></text></g><g><title>regex::compile::Compiler::compile_one (1 samples, 0.58%)</title><rect x="0.5848%" y="1269" width="0.5848%" height="15" fill="rgb(250,228,42)"/><text x="0.8348%" y="1279.50"></text></g><g><title>regex::compile::Compiler::c_capture (1 samples, 0.58%)</title><rect x="0.5848%" y="1253" width="0.5848%" height="15" fill="rgb(240,193,28)"/><text x="0.8348%" y="1263.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.58%)</title><rect x="0.5848%" y="1237" width="0.5848%" height="15" fill="rgb(216,20,37)"/><text x="0.8348%" y="1247.50"></text></g><g><title>regex::compile::Compiler::c_concat (1 samples, 0.58%)</title><rect x="0.5848%" y="1221" width="0.5848%" height="15" fill="rgb(206,188,39)"/><text x="0.8348%" y="1231.50"></text></g><g><title>regex::compile::Compiler::c_capture (1 samples, 0.58%)</title><rect x="0.5848%" y="1205" width="0.5848%" height="15" fill="rgb(217,207,13)"/><text x="0.8348%" y="1215.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.58%)</title><rect x="0.5848%" y="1189" width="0.5848%" height="15" fill="rgb(231,73,38)"/><text x="0.8348%" y="1199.50"></text></g><g><title>regex::compile::Compiler::c_concat (1 samples, 0.58%)</title><rect x="0.5848%" y="1173" width="0.5848%" height="15" fill="rgb(225,20,46)"/><text x="0.8348%" y="1183.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.58%)</title><rect x="0.5848%" y="1157" width="0.5848%" height="15" fill="rgb(210,31,41)"/><text x="0.8348%" y="1167.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.58%)</title><rect x="0.5848%" y="1141" width="0.5848%" height="15" fill="rgb(221,200,47)"/><text x="0.8348%" y="1151.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.58%)</title><rect x="0.5848%" y="1125" width="0.5848%" height="15" fill="rgb(226,26,5)"/><text x="0.8348%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.58%)</title><rect x="0.5848%" y="1109" width="0.5848%" height="15" fill="rgb(249,33,26)"/><text x="0.8348%" y="1119.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.58%)</title><rect x="0.5848%" y="1093" width="0.5848%" height="15" fill="rgb(235,183,28)"/><text x="0.8348%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.58%)</title><rect x="0.5848%" y="1077" width="0.5848%" height="15" fill="rgb(221,5,38)"/><text x="0.8348%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (1 samples, 0.58%)</title><rect x="0.5848%" y="1061" width="0.5848%" height="15" fill="rgb(247,18,42)"/><text x="0.8348%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.58%)</title><rect x="0.5848%" y="1045" width="0.5848%" height="15" fill="rgb(241,131,45)"/><text x="0.8348%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.58%)</title><rect x="0.5848%" y="1029" width="0.5848%" height="15" fill="rgb(249,31,29)"/><text x="0.8348%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.58%)</title><rect x="0.5848%" y="1013" width="0.5848%" height="15" fill="rgb(225,111,53)"/><text x="0.8348%" y="1023.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.58%)</title><rect x="1.1696%" y="1301" width="0.5848%" height="15" fill="rgb(238,160,17)"/><text x="1.4196%" y="1311.50"></text></g><g><title>actix_rt::arbiter::Arbiter::with_tokio_rt::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="1285" width="0.5848%" height="15" fill="rgb(214,148,48)"/><text x="1.4196%" y="1295.50"></text></g><g><title>actix_rt::runtime::Runtime::block_on (1 samples, 0.58%)</title><rect x="1.1696%" y="1269" width="0.5848%" height="15" fill="rgb(232,36,49)"/><text x="1.4196%" y="1279.50"></text></g><g><title>tokio::task::local::LocalSet::block_on (1 samples, 0.58%)</title><rect x="1.1696%" y="1253" width="0.5848%" height="15" fill="rgb(209,103,24)"/><text x="1.4196%" y="1263.50"></text></g><g><title>tokio::runtime::Runtime::block_on (1 samples, 0.58%)</title><rect x="1.1696%" y="1237" width="0.5848%" height="15" fill="rgb(229,88,8)"/><text x="1.4196%" y="1247.50"></text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler::block_on (1 samples, 0.58%)</title><rect x="1.1696%" y="1221" width="0.5848%" height="15" fill="rgb(213,181,19)"/><text x="1.4196%" y="1231.50"></text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on (1 samples, 0.58%)</title><rect x="1.1696%" y="1205" width="0.5848%" height="15" fill="rgb(254,191,54)"/><text x="1.4196%" y="1215.50"></text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::enter (1 samples, 0.58%)</title><rect x="1.1696%" y="1189" width="0.5848%" height="15" fill="rgb(241,83,37)"/><text x="1.4196%" y="1199.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.58%)</title><rect x="1.1696%" y="1173" width="0.5848%" height="15" fill="rgb(233,36,39)"/><text x="1.4196%" y="1183.50"></text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::enter::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="1157" width="0.5848%" height="15" fill="rgb(226,3,54)"/><text x="1.4196%" y="1167.50"></text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="1141" width="0.5848%" height="15" fill="rgb(245,192,40)"/><text x="1.4196%" y="1151.50"></text></g><g><title>tokio::runtime::basic_scheduler::Context::enter (1 samples, 0.58%)</title><rect x="1.1696%" y="1125" width="0.5848%" height="15" fill="rgb(238,167,29)"/><text x="1.4196%" y="1135.50"></text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="1109" width="0.5848%" height="15" fill="rgb(232,182,51)"/><text x="1.4196%" y="1119.50"></text></g><g><title>tokio::coop::budget (1 samples, 0.58%)</title><rect x="1.1696%" y="1093" width="0.5848%" height="15" fill="rgb(231,60,39)"/><text x="1.4196%" y="1103.50"></text></g><g><title>tokio::coop::with_budget (1 samples, 0.58%)</title><rect x="1.1696%" y="1077" width="0.5848%" height="15" fill="rgb(208,69,12)"/><text x="1.4196%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.58%)</title><rect x="1.1696%" y="1061" width="0.5848%" height="15" fill="rgb(235,93,37)"/><text x="1.4196%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.58%)</title><rect x="1.1696%" y="1045" width="0.5848%" height="15" fill="rgb(213,116,39)"/><text x="1.4196%" y="1055.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="1029" width="0.5848%" height="15" fill="rgb(222,207,29)"/><text x="1.4196%" y="1039.50"></text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="1013" width="0.5848%" height="15" fill="rgb(206,96,30)"/><text x="1.4196%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="997" width="0.5848%" height="15" fill="rgb(218,138,4)"/><text x="1.4196%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="981" width="0.5848%" height="15" fill="rgb(250,191,14)"/><text x="1.4196%" y="991.50"></text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="965" width="0.5848%" height="15" fill="rgb(239,60,40)"/><text x="1.4196%" y="975.50"></text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="949" width="0.5848%" height="15" fill="rgb(206,27,48)"/><text x="1.4196%" y="959.50"></text></g><g><title>tokio::task::local::LocalSet::with (1 samples, 0.58%)</title><rect x="1.1696%" y="933" width="0.5848%" height="15" fill="rgb(225,35,8)"/><text x="1.4196%" y="943.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.58%)</title><rect x="1.1696%" y="917" width="0.5848%" height="15" fill="rgb(250,213,24)"/><text x="1.4196%" y="927.50"></text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="901" width="0.5848%" height="15" fill="rgb(247,123,22)"/><text x="1.4196%" y="911.50"></text></g><g><title>tokio::task::local::LocalSet::tick (1 samples, 0.58%)</title><rect x="1.1696%" y="885" width="0.5848%" height="15" fill="rgb(231,138,38)"/><text x="1.4196%" y="895.50"></text></g><g><title>tokio::coop::budget (1 samples, 0.58%)</title><rect x="1.1696%" y="869" width="0.5848%" height="15" fill="rgb(231,145,46)"/><text x="1.4196%" y="879.50"></text></g><g><title>tokio::coop::with_budget (1 samples, 0.58%)</title><rect x="1.1696%" y="853" width="0.5848%" height="15" fill="rgb(251,118,11)"/><text x="1.4196%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.58%)</title><rect x="1.1696%" y="837" width="0.5848%" height="15" fill="rgb(217,147,25)"/><text x="1.4196%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.58%)</title><rect x="1.1696%" y="821" width="0.5848%" height="15" fill="rgb(247,81,37)"/><text x="1.4196%" y="831.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="805" width="0.5848%" height="15" fill="rgb(209,12,38)"/><text x="1.4196%" y="815.50"></text></g><g><title>tokio::task::local::LocalSet::tick::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="789" width="0.5848%" height="15" fill="rgb(227,1,9)"/><text x="1.4196%" y="799.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1 samples, 0.58%)</title><rect x="1.1696%" y="773" width="0.5848%" height="15" fill="rgb(248,47,43)"/><text x="1.4196%" y="783.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="757" width="0.5848%" height="15" fill="rgb(221,10,30)"/><text x="1.4196%" y="767.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="741" width="0.5848%" height="15" fill="rgb(210,229,1)"/><text x="1.4196%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="725" width="0.5848%" height="15" fill="rgb(222,148,37)"/><text x="1.4196%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.58%)</title><rect x="1.1696%" y="709" width="0.5848%" height="15" fill="rgb(234,67,33)"/><text x="1.4196%" y="719.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.58%)</title><rect x="1.1696%" y="693" width="0.5848%" height="15" fill="rgb(247,98,35)"/><text x="1.4196%" y="703.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.58%)</title><rect x="1.1696%" y="677" width="0.5848%" height="15" fill="rgb(247,138,52)"/><text x="1.4196%" y="687.50"></text></g><g><title>std::panicking::try (1 samples, 0.58%)</title><rect x="1.1696%" y="661" width="0.5848%" height="15" fill="rgb(213,79,30)"/><text x="1.4196%" y="671.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.58%)</title><rect x="1.1696%" y="645" width="0.5848%" height="15" fill="rgb(246,177,23)"/><text x="1.4196%" y="655.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.58%)</title><rect x="1.1696%" y="629" width="0.5848%" height="15" fill="rgb(230,62,27)"/><text x="1.4196%" y="639.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="613" width="0.5848%" height="15" fill="rgb(216,154,8)"/><text x="1.4196%" y="623.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="597" width="0.5848%" height="15" fill="rgb(244,35,45)"/><text x="1.4196%" y="607.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.58%)</title><rect x="1.1696%" y="581" width="0.5848%" height="15" fill="rgb(251,115,12)"/><text x="1.4196%" y="591.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="565" width="0.5848%" height="15" fill="rgb(240,54,50)"/><text x="1.4196%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="549" width="0.5848%" height="15" fill="rgb(233,84,52)"/><text x="1.4196%" y="559.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="533" width="0.5848%" height="15" fill="rgb(207,117,47)"/><text x="1.4196%" y="543.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="517" width="0.5848%" height="15" fill="rgb(249,43,39)"/><text x="1.4196%" y="527.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (1 samples, 0.58%)</title><rect x="1.1696%" y="501" width="0.5848%" height="15" fill="rgb(209,38,44)"/><text x="1.4196%" y="511.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::handle_request (1 samples, 0.58%)</title><rect x="1.1696%" y="485" width="0.5848%" height="15" fill="rgb(236,212,23)"/><text x="1.4196%" y="495.50"></text></g><g><title>&lt;actix_service::map_err::MapErrFuture&lt;A,Req,F,E&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="469" width="0.5848%" height="15" fill="rgb(242,79,21)"/><text x="1.4196%" y="479.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="453" width="0.5848%" height="15" fill="rgb(211,96,35)"/><text x="1.4196%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="437" width="0.5848%" height="15" fill="rgb(253,215,40)"/><text x="1.4196%" y="447.50"></text></g><g><title>&lt;actix_web_grants::middleware::GrantsService&lt;S,E,Req,Type&gt; as actix_service::Service&lt;actix_web::service::ServiceRequest&gt;&gt;::call::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="421" width="0.5848%" height="15" fill="rgb(211,81,21)"/><text x="1.4196%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="1.1696%" y="405" width="0.5848%" height="15" fill="rgb(208,190,38)"/><text x="1.4196%" y="415.50"></text></g><g><title>mining_proxy::extract::{{closure}} (1 samples, 0.58%)</title><rect x="1.1696%" y="389" width="0.5848%" height="15" fill="rgb(235,213,38)"/><text x="1.4196%" y="399.50"></text></g><g><title>jsonwebtoken::decoding::decode (1 samples, 0.58%)</title><rect x="1.1696%" y="373" width="0.5848%" height="15" fill="rgb(237,122,38)"/><text x="1.4196%" y="383.50"></text></g><g><title>jsonwebtoken::header::Header::from_encoded (1 samples, 0.58%)</title><rect x="1.1696%" y="357" width="0.5848%" height="15" fill="rgb(244,218,35)"/><text x="1.4196%" y="367.50"></text></g><g><title>serde_json::de::from_str (1 samples, 0.58%)</title><rect x="1.1696%" y="341" width="0.5848%" height="15" fill="rgb(240,68,47)"/><text x="1.4196%" y="351.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.58%)</title><rect x="1.1696%" y="325" width="0.5848%" height="15" fill="rgb(210,16,53)"/><text x="1.4196%" y="335.50"></text></g><g><title>jsonwebtoken::header::_::&lt;impl serde::de::Deserialize for jsonwebtoken::header::Header&gt;::deserialize (1 samples, 0.58%)</title><rect x="1.1696%" y="309" width="0.5848%" height="15" fill="rgb(235,124,12)"/><text x="1.4196%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.58%)</title><rect x="1.1696%" y="293" width="0.5848%" height="15" fill="rgb(224,169,11)"/><text x="1.4196%" y="303.50"></text></g><g><title>&lt;jsonwebtoken::header::_::&lt;impl serde::de::Deserialize for jsonwebtoken::header::Header&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.58%)</title><rect x="1.1696%" y="277" width="0.5848%" height="15" fill="rgb(250,166,2)"/><text x="1.4196%" y="287.50"></text></g><g><title>serde::de::MapAccess::next_key (1 samples, 0.58%)</title><rect x="1.1696%" y="261" width="0.5848%" height="15" fill="rgb(242,216,29)"/><text x="1.4196%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.58%)</title><rect x="1.1696%" y="245" width="0.5848%" height="15" fill="rgb(230,116,27)"/><text x="1.4196%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.58%)</title><rect x="1.1696%" y="229" width="0.5848%" height="15" fill="rgb(228,99,48)"/><text x="1.4196%" y="239.50"></text></g><g><title>&lt;jsonwebtoken::header::_::&lt;impl serde::de::Deserialize for jsonwebtoken::header::Header&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.58%)</title><rect x="1.1696%" y="213" width="0.5848%" height="15" fill="rgb(253,11,6)"/><text x="1.4196%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.58%)</title><rect x="1.1696%" y="197" width="0.5848%" height="15" fill="rgb(247,143,39)"/><text x="1.4196%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.58%)</title><rect x="1.1696%" y="181" width="0.5848%" height="15" fill="rgb(236,97,10)"/><text x="1.4196%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.58%)</title><rect x="1.1696%" y="165" width="0.5848%" height="15" fill="rgb(233,208,19)"/><text x="1.4196%" y="175.50"></text></g><g><title>&lt;actix_service::apply::Apply&lt;S,F,Req,In,Res,Err&gt; as actix_service::Service&lt;Req&gt;&gt;::call (1 samples, 0.58%)</title><rect x="1.7544%" y="917" width="0.5848%" height="15" fill="rgb(216,164,2)"/><text x="2.0044%" y="927.50"></text></g><g><title>&lt;actix_web::scope::Scope&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}} (1 samples, 0.58%)</title><rect x="1.7544%" y="901" width="0.5848%" height="15" fill="rgb(220,129,5)"/><text x="2.0044%" y="911.50"></text></g><g><title>&lt;actix_web::scope::ScopeService as actix_service::Service&lt;actix_web::service::ServiceRequest&gt;&gt;::call (1 samples, 0.58%)</title><rect x="1.7544%" y="885" width="0.5848%" height="15" fill="rgb(242,17,10)"/><text x="2.0044%" y="895.50"></text></g><g><title>actix_router::router::Router&lt;T,U&gt;::recognize_fn (1 samples, 0.58%)</title><rect x="1.7544%" y="869" width="0.5848%" height="15" fill="rgb(242,107,0)"/><text x="2.0044%" y="879.50"></text></g><g><title>actix_router::resource::ResourceDef::capture_match_info_fn (1 samples, 0.58%)</title><rect x="1.7544%" y="853" width="0.5848%" height="15" fill="rgb(251,28,31)"/><text x="2.0044%" y="863.50"></text></g><g><title>regex::re_unicode::Regex::captures (1 samples, 0.58%)</title><rect x="1.7544%" y="837" width="0.5848%" height="15" fill="rgb(233,223,10)"/><text x="2.0044%" y="847.50"></text></g><g><title>regex::re_unicode::Regex::captures_read_at (1 samples, 0.58%)</title><rect x="1.7544%" y="821" width="0.5848%" height="15" fill="rgb(215,21,27)"/><text x="2.0044%" y="831.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (1 samples, 0.58%)</title><rect x="1.7544%" y="805" width="0.5848%" height="15" fill="rgb(232,23,21)"/><text x="2.0044%" y="815.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (1 samples, 0.58%)</title><rect x="1.7544%" y="789" width="0.5848%" height="15" fill="rgb(244,5,23)"/><text x="2.0044%" y="799.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (1 samples, 0.58%)</title><rect x="1.7544%" y="773" width="0.5848%" height="15" fill="rgb(226,81,46)"/><text x="2.0044%" y="783.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (1 samples, 0.58%)</title><rect x="1.7544%" y="757" width="0.5848%" height="15" fill="rgb(247,70,30)"/><text x="2.0044%" y="767.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (1 samples, 0.58%)</title><rect x="1.7544%" y="741" width="0.5848%" height="15" fill="rgb(212,68,19)"/><text x="2.0044%" y="751.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (1 samples, 0.58%)</title><rect x="1.7544%" y="725" width="0.5848%" height="15" fill="rgb(240,187,13)"/><text x="2.0044%" y="735.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (1 samples, 0.58%)</title><rect x="1.7544%" y="709" width="0.5848%" height="15" fill="rgb(223,113,26)"/><text x="2.0044%" y="719.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (1 samples, 0.58%)</title><rect x="1.7544%" y="693" width="0.5848%" height="15" fill="rgb(206,192,2)"/><text x="2.0044%" y="703.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (1 samples, 0.58%)</title><rect x="1.7544%" y="677" width="0.5848%" height="15" fill="rgb(241,108,4)"/><text x="2.0044%" y="687.50"></text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="0.0000%" y="1317" width="2.9240%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="1327.50">[u..</text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="1301" width="1.1696%" height="15" fill="rgb(224,114,35)"/><text x="2.0044%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="1285" width="1.1696%" height="15" fill="rgb(245,159,27)"/><text x="2.0044%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 1.17%)</title><rect x="1.7544%" y="1269" width="1.1696%" height="15" fill="rgb(245,172,44)"/><text x="2.0044%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 1.17%)</title><rect x="1.7544%" y="1253" width="1.1696%" height="15" fill="rgb(236,23,11)"/><text x="2.0044%" y="1263.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.17%)</title><rect x="1.7544%" y="1237" width="1.1696%" height="15" fill="rgb(205,117,38)"/><text x="2.0044%" y="1247.50"></text></g><g><title>std::panicking::try (2 samples, 1.17%)</title><rect x="1.7544%" y="1221" width="1.1696%" height="15" fill="rgb(237,72,25)"/><text x="2.0044%" y="1231.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.17%)</title><rect x="1.7544%" y="1205" width="1.1696%" height="15" fill="rgb(244,70,9)"/><text x="2.0044%" y="1215.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 1.17%)</title><rect x="1.7544%" y="1189" width="1.1696%" height="15" fill="rgb(217,125,39)"/><text x="2.0044%" y="1199.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 1.17%)</title><rect x="1.7544%" y="1173" width="1.1696%" height="15" fill="rgb(235,36,10)"/><text x="2.0044%" y="1183.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="1157" width="1.1696%" height="15" fill="rgb(251,123,47)"/><text x="2.0044%" y="1167.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.17%)</title><rect x="1.7544%" y="1141" width="1.1696%" height="15" fill="rgb(221,13,13)"/><text x="2.0044%" y="1151.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 1.17%)</title><rect x="1.7544%" y="1125" width="1.1696%" height="15" fill="rgb(238,131,9)"/><text x="2.0044%" y="1135.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="1109" width="1.1696%" height="15" fill="rgb(211,50,8)"/><text x="2.0044%" y="1119.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (2 samples, 1.17%)</title><rect x="1.7544%" y="1093" width="1.1696%" height="15" fill="rgb(245,182,24)"/><text x="2.0044%" y="1103.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="1077" width="1.1696%" height="15" fill="rgb(242,14,37)"/><text x="2.0044%" y="1087.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (2 samples, 1.17%)</title><rect x="1.7544%" y="1061" width="1.1696%" height="15" fill="rgb(246,228,12)"/><text x="2.0044%" y="1071.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::handle_request (2 samples, 1.17%)</title><rect x="1.7544%" y="1045" width="1.1696%" height="15" fill="rgb(213,55,15)"/><text x="2.0044%" y="1055.50"></text></g><g><title>&lt;actix_service::map_err::MapErrFuture&lt;A,Req,F,E&gt; as core::future::future::Future&gt;::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="1029" width="1.1696%" height="15" fill="rgb(209,9,3)"/><text x="2.0044%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="1013" width="1.1696%" height="15" fill="rgb(230,59,30)"/><text x="2.0044%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.17%)</title><rect x="1.7544%" y="997" width="1.1696%" height="15" fill="rgb(209,121,21)"/><text x="2.0044%" y="1007.50"></text></g><g><title>&lt;actix_web_grants::middleware::GrantsService&lt;S,E,Req,Type&gt; as actix_service::Service&lt;actix_web::service::ServiceRequest&gt;&gt;::call::{{closure}} (2 samples, 1.17%)</title><rect x="1.7544%" y="981" width="1.1696%" height="15" fill="rgb(220,109,13)"/><text x="2.0044%" y="991.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (2 samples, 1.17%)</title><rect x="1.7544%" y="965" width="1.1696%" height="15" fill="rgb(232,18,1)"/><text x="2.0044%" y="975.50"></text></g><g><title>&lt;actix_web::app_service::AppRouting as actix_service::Service&lt;actix_web::service::ServiceRequest&gt;&gt;::call (2 samples, 1.17%)</title><rect x="1.7544%" y="949" width="1.1696%" height="15" fill="rgb(215,41,42)"/><text x="2.0044%" y="959.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (2 samples, 1.17%)</title><rect x="1.7544%" y="933" width="1.1696%" height="15" fill="rgb(224,123,36)"/><text x="2.0044%" y="943.50"></text></g><g><title>&lt;actix_web_static_files::resource_files::ResourceFilesService as actix_service::Service&lt;actix_web::service::ServiceRequest&gt;&gt;::call (1 samples, 0.58%)</title><rect x="2.3392%" y="917" width="0.5848%" height="15" fill="rgb(240,125,3)"/><text x="2.5892%" y="927.50"></text></g><g><title>actix_web_static_files::resource_files::respond_to (1 samples, 0.58%)</title><rect x="2.3392%" y="901" width="0.5848%" height="15" fill="rgb(205,98,50)"/><text x="2.5892%" y="911.50"></text></g><g><title>actix_web_static_files::resource_files::none_match (1 samples, 0.58%)</title><rect x="2.3392%" y="885" width="0.5848%" height="15" fill="rgb(205,185,37)"/><text x="2.5892%" y="895.50"></text></g><g><title>actix_web::http::header::entity::EntityTag::weak_eq (1 samples, 0.58%)</title><rect x="2.3392%" y="869" width="0.5848%" height="15" fill="rgb(238,207,15)"/><text x="2.5892%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.58%)</title><rect x="2.3392%" y="853" width="0.5848%" height="15" fill="rgb(213,199,42)"/><text x="2.5892%" y="863.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.58%)</title><rect x="2.3392%" y="837" width="0.5848%" height="15" fill="rgb(235,201,11)"/><text x="2.5892%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.58%)</title><rect x="2.3392%" y="821" width="0.5848%" height="15" fill="rgb(207,46,11)"/><text x="2.5892%" y="831.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.58%)</title><rect x="2.3392%" y="805" width="0.5848%" height="15" fill="rgb(241,35,35)"/><text x="2.5892%" y="815.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.58%)</title><rect x="2.3392%" y="789" width="0.5848%" height="15" fill="rgb(243,32,47)"/><text x="2.5892%" y="799.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.58%)</title><rect x="2.3392%" y="773" width="0.5848%" height="15" fill="rgb(247,202,23)"/><text x="2.5892%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.58%)</title><rect x="2.9240%" y="949" width="0.5848%" height="15" fill="rgb(219,102,11)"/><text x="3.1740%" y="959.50"></text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}} (1 samples, 0.58%)</title><rect x="2.9240%" y="933" width="0.5848%" height="15" fill="rgb(243,110,44)"/><text x="3.1740%" y="943.50"></text></g><g><title>tokio::runtime::basic_scheduler::Spawner::pop (1 samples, 0.58%)</title><rect x="2.9240%" y="917" width="0.5848%" height="15" fill="rgb(222,74,54)"/><text x="3.1740%" y="927.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.58%)</title><rect x="2.9240%" y="901" width="0.5848%" height="15" fill="rgb(216,99,12)"/><text x="3.1740%" y="911.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.58%)</title><rect x="2.9240%" y="885" width="0.5848%" height="15" fill="rgb(226,22,26)"/><text x="3.1740%" y="895.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.58%)</title><rect x="2.9240%" y="869" width="0.5848%" height="15" fill="rgb(217,163,10)"/><text x="3.1740%" y="879.50"></text></g><g><title>tokio::coop::budget (1 samples, 0.58%)</title><rect x="3.5088%" y="709" width="0.5848%" height="15" fill="rgb(213,25,53)"/><text x="3.7588%" y="719.50"></text></g><g><title>tokio::coop::with_budget (1 samples, 0.58%)</title><rect x="3.5088%" y="693" width="0.5848%" height="15" fill="rgb(252,105,26)"/><text x="3.7588%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.58%)</title><rect x="3.5088%" y="677" width="0.5848%" height="15" fill="rgb(220,39,43)"/><text x="3.7588%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.58%)</title><rect x="3.5088%" y="661" width="0.5848%" height="15" fill="rgb(229,68,48)"/><text x="3.7588%" y="671.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.58%)</title><rect x="3.5088%" y="645" width="0.5848%" height="15" fill="rgb(252,8,32)"/><text x="3.7588%" y="655.50"></text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}}::{{closure}} (1 samples, 0.58%)</title><rect x="3.5088%" y="629" width="0.5848%" height="15" fill="rgb(223,20,43)"/><text x="3.7588%" y="639.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="3.5088%" y="613" width="0.5848%" height="15" fill="rgb(229,81,49)"/><text x="3.7588%" y="623.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (1 samples, 0.58%)</title><rect x="3.5088%" y="597" width="0.5848%" height="15" fill="rgb(236,28,36)"/><text x="3.7588%" y="607.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 0.58%)</title><rect x="3.5088%" y="581" width="0.5848%" height="15" fill="rgb(249,185,26)"/><text x="3.7588%" y="591.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.58%)</title><rect x="3.5088%" y="565" width="0.5848%" height="15" fill="rgb(249,174,33)"/><text x="3.7588%" y="575.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (1 samples, 0.58%)</title><rect x="3.5088%" y="549" width="0.5848%" height="15" fill="rgb(233,201,37)"/><text x="3.7588%" y="559.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.58%)</title><rect x="3.5088%" y="533" width="0.5848%" height="15" fill="rgb(221,78,26)"/><text x="3.7588%" y="543.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (1 samples, 0.58%)</title><rect x="3.5088%" y="517" width="0.5848%" height="15" fill="rgb(250,127,30)"/><text x="3.7588%" y="527.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (1 samples, 0.58%)</title><rect x="3.5088%" y="501" width="0.5848%" height="15" fill="rgb(230,49,44)"/><text x="3.7588%" y="511.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.58%)</title><rect x="3.5088%" y="485" width="0.5848%" height="15" fill="rgb(229,67,23)"/><text x="3.7588%" y="495.50"></text></g><g><title>std::panicking::try (1 samples, 0.58%)</title><rect x="3.5088%" y="469" width="0.5848%" height="15" fill="rgb(249,83,47)"/><text x="3.7588%" y="479.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.58%)</title><rect x="3.5088%" y="453" width="0.5848%" height="15" fill="rgb(215,43,3)"/><text x="3.7588%" y="463.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.58%)</title><rect x="3.5088%" y="437" width="0.5848%" height="15" fill="rgb(238,154,13)"/><text x="3.7588%" y="447.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (1 samples, 0.58%)</title><rect x="3.5088%" y="421" width="0.5848%" height="15" fill="rgb(219,56,2)"/><text x="3.7588%" y="431.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (1 samples, 0.58%)</title><rect x="3.5088%" y="405" width="0.5848%" height="15" fill="rgb(233,0,4)"/><text x="3.7588%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.58%)</title><rect x="3.5088%" y="389" width="0.5848%" height="15" fill="rgb(235,30,7)"/><text x="3.7588%" y="399.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.58%)</title><rect x="4.0936%" y="709" width="0.5848%" height="15" fill="rgb(250,79,13)"/><text x="4.3436%" y="719.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (1 samples, 0.58%)</title><rect x="4.0936%" y="693" width="0.5848%" height="15" fill="rgb(211,146,34)"/><text x="4.3436%" y="703.50"></text></g><g><title>httpdate::fmt_http_date (3 samples, 1.75%)</title><rect x="4.6784%" y="309" width="1.7544%" height="15" fill="rgb(228,22,38)"/><text x="4.9284%" y="319.50"></text></g><g><title>alloc::fmt::format (3 samples, 1.75%)</title><rect x="4.6784%" y="293" width="1.7544%" height="15" fill="rgb(235,168,5)"/><text x="4.9284%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 1.75%)</title><rect x="4.6784%" y="277" width="1.7544%" height="15" fill="rgb(221,155,16)"/><text x="4.9284%" y="287.50"></text></g><g><title>core::fmt::write (3 samples, 1.75%)</title><rect x="4.6784%" y="261" width="1.7544%" height="15" fill="rgb(215,215,53)"/><text x="4.9284%" y="271.50"></text></g><g><title>&lt;httpdate::date::HttpDate as core::fmt::Display&gt;::fmt (3 samples, 1.75%)</title><rect x="4.6784%" y="245" width="1.7544%" height="15" fill="rgb(223,4,10)"/><text x="4.9284%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_str (3 samples, 1.75%)</title><rect x="4.6784%" y="229" width="1.7544%" height="15" fill="rgb(234,103,6)"/><text x="4.9284%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 1.75%)</title><rect x="4.6784%" y="213" width="1.7544%" height="15" fill="rgb(227,97,0)"/><text x="4.9284%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 1.75%)</title><rect x="4.6784%" y="197" width="1.7544%" height="15" fill="rgb(234,150,53)"/><text x="4.9284%" y="207.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 1.75%)</title><rect x="4.6784%" y="181" width="1.7544%" height="15" fill="rgb(228,201,54)"/><text x="4.9284%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 1.75%)</title><rect x="4.6784%" y="165" width="1.7544%" height="15" fill="rgb(222,22,37)"/><text x="4.9284%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 1.75%)</title><rect x="4.6784%" y="149" width="1.7544%" height="15" fill="rgb(237,53,32)"/><text x="4.9284%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 1.75%)</title><rect x="4.6784%" y="133" width="1.7544%" height="15" fill="rgb(233,25,53)"/><text x="4.9284%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 1.75%)</title><rect x="4.6784%" y="117" width="1.7544%" height="15" fill="rgb(210,40,34)"/><text x="4.9284%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 1.75%)</title><rect x="4.6784%" y="101" width="1.7544%" height="15" fill="rgb(241,220,44)"/><text x="4.9284%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 1.75%)</title><rect x="4.6784%" y="85" width="1.7544%" height="15" fill="rgb(235,28,35)"/><text x="4.9284%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 1.75%)</title><rect x="4.6784%" y="69" width="1.7544%" height="15" fill="rgb(210,56,17)"/><text x="4.9284%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 1.75%)</title><rect x="4.6784%" y="53" width="1.7544%" height="15" fill="rgb(224,130,29)"/><text x="4.9284%" y="63.50"></text></g><g><title>__GI___libc_malloc (3 samples, 1.75%)</title><rect x="4.6784%" y="37" width="1.7544%" height="15" fill="rgb(235,212,8)"/><text x="4.9284%" y="47.50"></text></g><g><title>tokio::runtime::basic_scheduler::Context::enter (6 samples, 3.51%)</title><rect x="3.5088%" y="949" width="3.5088%" height="15" fill="rgb(223,33,50)"/><text x="3.7588%" y="959.50">tok..</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}} (6 samples, 3.51%)</title><rect x="3.5088%" y="933" width="3.5088%" height="15" fill="rgb(219,149,13)"/><text x="3.7588%" y="943.50">tok..</text></g><g><title>tokio::coop::budget (6 samples, 3.51%)</title><rect x="3.5088%" y="917" width="3.5088%" height="15" fill="rgb(250,156,29)"/><text x="3.7588%" y="927.50">tok..</text></g><g><title>tokio::coop::with_budget (6 samples, 3.51%)</title><rect x="3.5088%" y="901" width="3.5088%" height="15" fill="rgb(216,193,19)"/><text x="3.7588%" y="911.50">tok..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 3.51%)</title><rect x="3.5088%" y="885" width="3.5088%" height="15" fill="rgb(216,135,14)"/><text x="3.7588%" y="895.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 3.51%)</title><rect x="3.5088%" y="869" width="3.5088%" height="15" fill="rgb(241,47,5)"/><text x="3.7588%" y="879.50">std..</text></g><g><title>tokio::coop::with_budget::{{closure}} (6 samples, 3.51%)</title><rect x="3.5088%" y="853" width="3.5088%" height="15" fill="rgb(233,42,35)"/><text x="3.7588%" y="863.50">tok..</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}} (6 samples, 3.51%)</title><rect x="3.5088%" y="837" width="3.5088%" height="15" fill="rgb(231,13,6)"/><text x="3.7588%" y="847.50">tok..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6 samples, 3.51%)</title><rect x="3.5088%" y="821" width="3.5088%" height="15" fill="rgb(207,181,40)"/><text x="3.7588%" y="831.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 3.51%)</title><rect x="3.5088%" y="805" width="3.5088%" height="15" fill="rgb(254,173,49)"/><text x="3.7588%" y="815.50">&lt;co..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (6 samples, 3.51%)</title><rect x="3.5088%" y="789" width="3.5088%" height="15" fill="rgb(221,1,38)"/><text x="3.7588%" y="799.50">tok..</text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 3.51%)</title><rect x="3.5088%" y="773" width="3.5088%" height="15" fill="rgb(206,124,46)"/><text x="3.7588%" y="783.50">&lt;to..</text></g><g><title>tokio::task::local::LocalSet::with (6 samples, 3.51%)</title><rect x="3.5088%" y="757" width="3.5088%" height="15" fill="rgb(249,21,11)"/><text x="3.7588%" y="767.50">tok..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (6 samples, 3.51%)</title><rect x="3.5088%" y="741" width="3.5088%" height="15" fill="rgb(222,201,40)"/><text x="3.7588%" y="751.50">tok..</text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (6 samples, 3.51%)</title><rect x="3.5088%" y="725" width="3.5088%" height="15" fill="rgb(235,61,29)"/><text x="3.7588%" y="735.50">&lt;to..</text></g><g><title>tokio::task::local::LocalSet::tick (4 samples, 2.34%)</title><rect x="4.6784%" y="709" width="2.3392%" height="15" fill="rgb(219,207,3)"/><text x="4.9284%" y="719.50">t..</text></g><g><title>tokio::coop::budget (4 samples, 2.34%)</title><rect x="4.6784%" y="693" width="2.3392%" height="15" fill="rgb(222,56,46)"/><text x="4.9284%" y="703.50">t..</text></g><g><title>tokio::coop::with_budget (4 samples, 2.34%)</title><rect x="4.6784%" y="677" width="2.3392%" height="15" fill="rgb(239,76,54)"/><text x="4.9284%" y="687.50">t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 2.34%)</title><rect x="4.6784%" y="661" width="2.3392%" height="15" fill="rgb(231,124,27)"/><text x="4.9284%" y="671.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 2.34%)</title><rect x="4.6784%" y="645" width="2.3392%" height="15" fill="rgb(249,195,6)"/><text x="4.9284%" y="655.50">s..</text></g><g><title>tokio::coop::with_budget::{{closure}} (4 samples, 2.34%)</title><rect x="4.6784%" y="629" width="2.3392%" height="15" fill="rgb(237,174,47)"/><text x="4.9284%" y="639.50">t..</text></g><g><title>tokio::task::local::LocalSet::tick::{{closure}} (4 samples, 2.34%)</title><rect x="4.6784%" y="613" width="2.3392%" height="15" fill="rgb(206,201,31)"/><text x="4.9284%" y="623.50">t..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (4 samples, 2.34%)</title><rect x="4.6784%" y="597" width="2.3392%" height="15" fill="rgb(231,57,52)"/><text x="4.9284%" y="607.50">t..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 2.34%)</title><rect x="4.6784%" y="581" width="2.3392%" height="15" fill="rgb(248,177,22)"/><text x="4.9284%" y="591.50">t..</text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 2.34%)</title><rect x="4.6784%" y="565" width="2.3392%" height="15" fill="rgb(215,211,37)"/><text x="4.9284%" y="575.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 2.34%)</title><rect x="4.6784%" y="549" width="2.3392%" height="15" fill="rgb(241,128,51)"/><text x="4.9284%" y="559.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 2.34%)</title><rect x="4.6784%" y="533" width="2.3392%" height="15" fill="rgb(227,165,31)"/><text x="4.9284%" y="543.50">t..</text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 2.34%)</title><rect x="4.6784%" y="517" width="2.3392%" height="15" fill="rgb(228,167,24)"/><text x="4.9284%" y="527.50">t..</text></g><g><title>std::panic::catch_unwind (4 samples, 2.34%)</title><rect x="4.6784%" y="501" width="2.3392%" height="15" fill="rgb(228,143,12)"/><text x="4.9284%" y="511.50">s..</text></g><g><title>std::panicking::try (4 samples, 2.34%)</title><rect x="4.6784%" y="485" width="2.3392%" height="15" fill="rgb(249,149,8)"/><text x="4.9284%" y="495.50">s..</text></g><g><title>std::panicking::try::do_call (4 samples, 2.34%)</title><rect x="4.6784%" y="469" width="2.3392%" height="15" fill="rgb(243,35,44)"/><text x="4.9284%" y="479.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 2.34%)</title><rect x="4.6784%" y="453" width="2.3392%" height="15" fill="rgb(246,89,9)"/><text x="4.9284%" y="463.50">&lt;..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (4 samples, 2.34%)</title><rect x="4.6784%" y="437" width="2.3392%" height="15" fill="rgb(233,213,13)"/><text x="4.9284%" y="447.50">t..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (4 samples, 2.34%)</title><rect x="4.6784%" y="421" width="2.3392%" height="15" fill="rgb(233,141,41)"/><text x="4.9284%" y="431.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 2.34%)</title><rect x="4.6784%" y="405" width="2.3392%" height="15" fill="rgb(239,167,4)"/><text x="4.9284%" y="415.50">t..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (4 samples, 2.34%)</title><rect x="4.6784%" y="389" width="2.3392%" height="15" fill="rgb(209,217,16)"/><text x="4.9284%" y="399.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 2.34%)</title><rect x="4.6784%" y="373" width="2.3392%" height="15" fill="rgb(219,88,35)"/><text x="4.9284%" y="383.50">&lt;..</text></g><g><title>actix_http::date::DateService::new::{{closure}} (4 samples, 2.34%)</title><rect x="4.6784%" y="357" width="2.3392%" height="15" fill="rgb(220,193,23)"/><text x="4.9284%" y="367.50">a..</text></g><g><title>actix_http::date::Date::new (4 samples, 2.34%)</title><rect x="4.6784%" y="341" width="2.3392%" height="15" fill="rgb(230,90,52)"/><text x="4.9284%" y="351.50">a..</text></g><g><title>actix_http::date::Date::update (4 samples, 2.34%)</title><rect x="4.6784%" y="325" width="2.3392%" height="15" fill="rgb(252,106,19)"/><text x="4.9284%" y="335.50">a..</text></g><g><title>std::time::SystemTime::now (1 samples, 0.58%)</title><rect x="6.4327%" y="309" width="0.5848%" height="15" fill="rgb(206,74,20)"/><text x="6.6827%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (1 samples, 0.58%)</title><rect x="6.4327%" y="293" width="0.5848%" height="15" fill="rgb(230,138,44)"/><text x="6.6827%" y="303.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.58%)</title><rect x="6.4327%" y="277" width="0.5848%" height="15" fill="rgb(235,182,43)"/><text x="6.6827%" y="287.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.58%)</title><rect x="6.4327%" y="261" width="0.5848%" height="15" fill="rgb(242,16,51)"/><text x="6.6827%" y="271.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.58%)</title><rect x="6.4327%" y="245" width="0.5848%" height="15" fill="rgb(248,9,4)"/><text x="6.6827%" y="255.50"></text></g><g><title>[[vdso]] (1 samples, 0.58%)</title><rect x="6.4327%" y="229" width="0.5848%" height="15" fill="rgb(210,31,22)"/><text x="6.6827%" y="239.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (2 samples, 1.17%)</title><rect x="7.6023%" y="789" width="1.1696%" height="15" fill="rgb(239,54,39)"/><text x="7.8523%" y="799.50"></text></g><g><title>tokio::io::driver::Driver::turn (1 samples, 0.58%)</title><rect x="8.1871%" y="773" width="0.5848%" height="15" fill="rgb(230,99,41)"/><text x="8.4371%" y="783.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.58%)</title><rect x="8.1871%" y="757" width="0.5848%" height="15" fill="rgb(253,106,12)"/><text x="8.4371%" y="767.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1 samples, 0.58%)</title><rect x="8.1871%" y="741" width="0.5848%" height="15" fill="rgb(213,46,41)"/><text x="8.4371%" y="751.50"></text></g><g><title>epoll_wait (1 samples, 0.58%)</title><rect x="8.1871%" y="725" width="0.5848%" height="15" fill="rgb(215,133,35)"/><text x="8.4371%" y="735.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park_timeout (3 samples, 1.75%)</title><rect x="7.6023%" y="805" width="1.7544%" height="15" fill="rgb(213,28,5)"/><text x="7.8523%" y="815.50"></text></g><g><title>tokio::signal::unix::driver::Driver::process (1 samples, 0.58%)</title><rect x="8.7719%" y="789" width="0.5848%" height="15" fill="rgb(215,77,49)"/><text x="9.0219%" y="799.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_ready (1 samples, 0.58%)</title><rect x="8.7719%" y="773" width="0.5848%" height="15" fill="rgb(248,100,22)"/><text x="9.0219%" y="783.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.58%)</title><rect x="8.7719%" y="757" width="0.5848%" height="15" fill="rgb(208,67,9)"/><text x="9.0219%" y="767.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.58%)</title><rect x="8.7719%" y="741" width="0.5848%" height="15" fill="rgb(219,133,21)"/><text x="9.0219%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.58%)</title><rect x="8.7719%" y="725" width="0.5848%" height="15" fill="rgb(246,46,29)"/><text x="9.0219%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.58%)</title><rect x="8.7719%" y="709" width="0.5848%" height="15" fill="rgb(246,185,52)"/><text x="9.0219%" y="719.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (4 samples, 2.34%)</title><rect x="7.6023%" y="837" width="2.3392%" height="15" fill="rgb(252,136,11)"/><text x="7.8523%" y="847.50">&lt;..</text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (4 samples, 2.34%)</title><rect x="7.6023%" y="821" width="2.3392%" height="15" fill="rgb(219,138,53)"/><text x="7.8523%" y="831.50">&lt;..</text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.58%)</title><rect x="9.3567%" y="805" width="0.5848%" height="15" fill="rgb(211,51,23)"/><text x="9.6067%" y="815.50"></text></g><g><title>tokio::task::local::Shared::schedule::{{closure}} (2 samples, 1.17%)</title><rect x="9.9415%" y="709" width="1.1696%" height="15" fill="rgb(247,221,28)"/><text x="10.1915%" y="719.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (1 samples, 0.58%)</title><rect x="10.5263%" y="693" width="0.5848%" height="15" fill="rgb(251,222,45)"/><text x="10.7763%" y="703.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (1 samples, 0.58%)</title><rect x="10.5263%" y="677" width="0.5848%" height="15" fill="rgb(217,162,53)"/><text x="10.7763%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (1 samples, 0.58%)</title><rect x="10.5263%" y="661" width="0.5848%" height="15" fill="rgb(229,93,14)"/><text x="10.7763%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_or (1 samples, 0.58%)</title><rect x="10.5263%" y="645" width="0.5848%" height="15" fill="rgb(209,67,49)"/><text x="10.7763%" y="655.50"></text></g><g><title>core::task::wake::Waker::wake (3 samples, 1.75%)</title><rect x="9.9415%" y="805" width="1.7544%" height="15" fill="rgb(213,87,29)"/><text x="10.1915%" y="815.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 1.75%)</title><rect x="9.9415%" y="789" width="1.7544%" height="15" fill="rgb(205,151,52)"/><text x="10.1915%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (3 samples, 1.75%)</title><rect x="9.9415%" y="773" width="1.7544%" height="15" fill="rgb(253,215,39)"/><text x="10.1915%" y="783.50"></text></g><g><title>tokio::task::local::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::task::local::Shared&gt;&gt;::schedule (3 samples, 1.75%)</title><rect x="9.9415%" y="757" width="1.7544%" height="15" fill="rgb(221,220,41)"/><text x="10.1915%" y="767.50"></text></g><g><title>tokio::task::local::Shared::schedule (3 samples, 1.75%)</title><rect x="9.9415%" y="741" width="1.7544%" height="15" fill="rgb(218,133,21)"/><text x="10.1915%" y="751.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (3 samples, 1.75%)</title><rect x="9.9415%" y="725" width="1.7544%" height="15" fill="rgb(221,193,43)"/><text x="10.1915%" y="735.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (1 samples, 0.58%)</title><rect x="11.1111%" y="709" width="0.5848%" height="15" fill="rgb(240,128,52)"/><text x="11.3611%" y="719.50"></text></g><g><title>&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake (1 samples, 0.58%)</title><rect x="11.1111%" y="693" width="0.5848%" height="15" fill="rgb(253,114,12)"/><text x="11.3611%" y="703.50"></text></g><g><title>&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake_by_ref (1 samples, 0.58%)</title><rect x="11.1111%" y="677" width="0.5848%" height="15" fill="rgb(215,223,47)"/><text x="11.3611%" y="687.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (1 samples, 0.58%)</title><rect x="11.1111%" y="661" width="0.5848%" height="15" fill="rgb(248,225,23)"/><text x="11.3611%" y="671.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (1 samples, 0.58%)</title><rect x="11.1111%" y="645" width="0.5848%" height="15" fill="rgb(250,108,0)"/><text x="11.3611%" y="655.50"></text></g><g><title>tokio::io::driver::Handle::wakeup (1 samples, 0.58%)</title><rect x="11.1111%" y="629" width="0.5848%" height="15" fill="rgb(228,208,7)"/><text x="11.3611%" y="639.50"></text></g><g><title>mio::waker::Waker::wake (1 samples, 0.58%)</title><rect x="11.1111%" y="613" width="0.5848%" height="15" fill="rgb(244,45,10)"/><text x="11.3611%" y="623.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (1 samples, 0.58%)</title><rect x="11.1111%" y="597" width="0.5848%" height="15" fill="rgb(207,125,25)"/><text x="11.3611%" y="607.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.58%)</title><rect x="11.1111%" y="581" width="0.5848%" height="15" fill="rgb(210,195,18)"/><text x="11.3611%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.58%)</title><rect x="11.1111%" y="565" width="0.5848%" height="15" fill="rgb(249,80,12)"/><text x="11.3611%" y="575.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.58%)</title><rect x="11.1111%" y="549" width="0.5848%" height="15" fill="rgb(221,65,9)"/><text x="11.3611%" y="559.50"></text></g><g><title>__libc_write (1 samples, 0.58%)</title><rect x="11.1111%" y="533" width="0.5848%" height="15" fill="rgb(235,49,36)"/><text x="11.3611%" y="543.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (4 samples, 2.34%)</title><rect x="9.9415%" y="821" width="2.3392%" height="15" fill="rgb(225,32,20)"/><text x="10.1915%" y="831.50">t..</text></g><g><title>tokio::time::driver::wheel::Wheel::poll (1 samples, 0.58%)</title><rect x="11.6959%" y="805" width="0.5848%" height="15" fill="rgb(215,141,46)"/><text x="11.9459%" y="815.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::process_expiration (1 samples, 0.58%)</title><rect x="11.6959%" y="789" width="0.5848%" height="15" fill="rgb(250,160,47)"/><text x="11.9459%" y="799.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::take_entries (1 samples, 0.58%)</title><rect x="11.6959%" y="773" width="0.5848%" height="15" fill="rgb(216,222,40)"/><text x="11.9459%" y="783.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::take_slot (1 samples, 0.58%)</title><rect x="11.6959%" y="757" width="0.5848%" height="15" fill="rgb(234,217,39)"/><text x="11.9459%" y="767.50"></text></g><g><title>core::mem::take (1 samples, 0.58%)</title><rect x="11.6959%" y="741" width="0.5848%" height="15" fill="rgb(207,178,40)"/><text x="11.9459%" y="751.50"></text></g><g><title>core::mem::replace (1 samples, 0.58%)</title><rect x="11.6959%" y="725" width="0.5848%" height="15" fill="rgb(221,136,13)"/><text x="11.9459%" y="735.50"></text></g><g><title>core::ptr::read (1 samples, 0.58%)</title><rect x="11.6959%" y="709" width="0.5848%" height="15" fill="rgb(249,199,10)"/><text x="11.9459%" y="719.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (5 samples, 2.92%)</title><rect x="9.9415%" y="837" width="2.9240%" height="15" fill="rgb(249,222,13)"/><text x="10.1915%" y="847.50">to..</text></g><g><title>tokio::time::driver::ClockTime::now (1 samples, 0.58%)</title><rect x="12.2807%" y="821" width="0.5848%" height="15" fill="rgb(244,185,38)"/><text x="12.5307%" y="831.50"></text></g><g><title>tokio::time::clock::Clock::now (1 samples, 0.58%)</title><rect x="12.2807%" y="805" width="0.5848%" height="15" fill="rgb(236,202,9)"/><text x="12.5307%" y="815.50"></text></g><g><title>tokio::time::clock::now (1 samples, 0.58%)</title><rect x="12.2807%" y="789" width="0.5848%" height="15" fill="rgb(250,229,37)"/><text x="12.5307%" y="799.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.58%)</title><rect x="12.2807%" y="773" width="0.5848%" height="15" fill="rgb(206,174,23)"/><text x="12.5307%" y="783.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.58%)</title><rect x="12.2807%" y="757" width="0.5848%" height="15" fill="rgb(211,33,43)"/><text x="12.5307%" y="767.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.58%)</title><rect x="12.2807%" y="741" width="0.5848%" height="15" fill="rgb(245,58,50)"/><text x="12.5307%" y="751.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.58%)</title><rect x="12.2807%" y="725" width="0.5848%" height="15" fill="rgb(244,68,36)"/><text x="12.5307%" y="735.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.58%)</title><rect x="12.2807%" y="709" width="0.5848%" height="15" fill="rgb(232,229,15)"/><text x="12.5307%" y="719.50"></text></g><g><title>std::panic::catch_unwind (18 samples, 10.53%)</title><rect x="2.9240%" y="1205" width="10.5263%" height="15" fill="rgb(254,30,23)"/><text x="3.1740%" y="1215.50">std::panic::cat..</text></g><g><title>std::panicking::try (18 samples, 10.53%)</title><rect x="2.9240%" y="1189" width="10.5263%" height="15" fill="rgb(235,160,14)"/><text x="3.1740%" y="1199.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (18 samples, 10.53%)</title><rect x="2.9240%" y="1173" width="10.5263%" height="15" fill="rgb(212,155,44)"/><text x="3.1740%" y="1183.50">std::panicking:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18 samples, 10.53%)</title><rect x="2.9240%" y="1157" width="10.5263%" height="15" fill="rgb(226,2,50)"/><text x="3.1740%" y="1167.50">&lt;core::panic::u..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (18 samples, 10.53%)</title><rect x="2.9240%" y="1141" width="10.5263%" height="15" fill="rgb(234,177,6)"/><text x="3.1740%" y="1151.50">std::thread::Bu..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 10.53%)</title><rect x="2.9240%" y="1125" width="10.5263%" height="15" fill="rgb(217,24,9)"/><text x="3.1740%" y="1135.50">std::sys_common..</text></g><g><title>actix_rt::arbiter::Arbiter::with_tokio_rt::{{closure}} (18 samples, 10.53%)</title><rect x="2.9240%" y="1109" width="10.5263%" height="15" fill="rgb(220,13,46)"/><text x="3.1740%" y="1119.50">actix_rt::arbit..</text></g><g><title>actix_rt::runtime::Runtime::block_on (18 samples, 10.53%)</title><rect x="2.9240%" y="1093" width="10.5263%" height="15" fill="rgb(239,221,27)"/><text x="3.1740%" y="1103.50">actix_rt::runti..</text></g><g><title>tokio::task::local::LocalSet::block_on (18 samples, 10.53%)</title><rect x="2.9240%" y="1077" width="10.5263%" height="15" fill="rgb(222,198,25)"/><text x="3.1740%" y="1087.50">tokio::task::lo..</text></g><g><title>tokio::runtime::Runtime::block_on (18 samples, 10.53%)</title><rect x="2.9240%" y="1061" width="10.5263%" height="15" fill="rgb(211,99,13)"/><text x="3.1740%" y="1071.50">tokio::runtime:..</text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler::block_on (18 samples, 10.53%)</title><rect x="2.9240%" y="1045" width="10.5263%" height="15" fill="rgb(232,111,31)"/><text x="3.1740%" y="1055.50">tokio::runtime:..</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on (18 samples, 10.53%)</title><rect x="2.9240%" y="1029" width="10.5263%" height="15" fill="rgb(245,82,37)"/><text x="3.1740%" y="1039.50">tokio::runtime:..</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::enter (18 samples, 10.53%)</title><rect x="2.9240%" y="1013" width="10.5263%" height="15" fill="rgb(227,149,46)"/><text x="3.1740%" y="1023.50">tokio::runtime:..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (18 samples, 10.53%)</title><rect x="2.9240%" y="997" width="10.5263%" height="15" fill="rgb(218,36,50)"/><text x="3.1740%" y="1007.50">tokio::macros::..</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::enter::{{closure}} (18 samples, 10.53%)</title><rect x="2.9240%" y="981" width="10.5263%" height="15" fill="rgb(226,80,48)"/><text x="3.1740%" y="991.50">tokio::runtime:..</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}} (18 samples, 10.53%)</title><rect x="2.9240%" y="965" width="10.5263%" height="15" fill="rgb(238,224,15)"/><text x="3.1740%" y="975.50">tokio::runtime:..</text></g><g><title>tokio::runtime::basic_scheduler::Context::park (11 samples, 6.43%)</title><rect x="7.0175%" y="949" width="6.4327%" height="15" fill="rgb(241,136,10)"/><text x="7.2675%" y="959.50">tokio::r..</text></g><g><title>tokio::runtime::basic_scheduler::Context::enter (11 samples, 6.43%)</title><rect x="7.0175%" y="933" width="6.4327%" height="15" fill="rgb(208,32,45)"/><text x="7.2675%" y="943.50">tokio::r..</text></g><g><title>tokio::runtime::basic_scheduler::Context::park::{{closure}} (11 samples, 6.43%)</title><rect x="7.0175%" y="917" width="6.4327%" height="15" fill="rgb(207,135,9)"/><text x="7.2675%" y="927.50">tokio::r..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (11 samples, 6.43%)</title><rect x="7.0175%" y="901" width="6.4327%" height="15" fill="rgb(206,86,44)"/><text x="7.2675%" y="911.50">&lt;tokio::..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (11 samples, 6.43%)</title><rect x="7.0175%" y="885" width="6.4327%" height="15" fill="rgb(245,177,15)"/><text x="7.2675%" y="895.50">&lt;tokio::..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (11 samples, 6.43%)</title><rect x="7.0175%" y="869" width="6.4327%" height="15" fill="rgb(206,64,50)"/><text x="7.2675%" y="879.50">&lt;tokio::..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (11 samples, 6.43%)</title><rect x="7.0175%" y="853" width="6.4327%" height="15" fill="rgb(234,36,40)"/><text x="7.2675%" y="863.50">tokio::t..</text></g><g><title>tokio::time::driver::handle::Handle::is_shutdown (1 samples, 0.58%)</title><rect x="12.8655%" y="837" width="0.5848%" height="15" fill="rgb(213,64,8)"/><text x="13.1155%" y="847.50"></text></g><g><title>tokio::time::driver::Inner::is_shutdown (1 samples, 0.58%)</title><rect x="12.8655%" y="821" width="0.5848%" height="15" fill="rgb(210,75,36)"/><text x="13.1155%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.58%)</title><rect x="12.8655%" y="805" width="0.5848%" height="15" fill="rgb(229,88,21)"/><text x="13.1155%" y="815.50"></text></g><g><title>actix-rt|system (24 samples, 14.04%)</title><rect x="0.0000%" y="1333" width="14.0351%" height="15" fill="rgb(252,204,47)"/><text x="0.2500%" y="1343.50">actix-rt|system</text></g><g><title>__GI___clone (19 samples, 11.11%)</title><rect x="2.9240%" y="1317" width="11.1111%" height="15" fill="rgb(208,77,27)"/><text x="3.1740%" y="1327.50">__GI___clone</text></g><g><title>start_thread (19 samples, 11.11%)</title><rect x="2.9240%" y="1301" width="11.1111%" height="15" fill="rgb(221,76,26)"/><text x="3.1740%" y="1311.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (19 samples, 11.11%)</title><rect x="2.9240%" y="1285" width="11.1111%" height="15" fill="rgb(225,139,18)"/><text x="3.1740%" y="1295.50">std::sys::unix::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (19 samples, 11.11%)</title><rect x="2.9240%" y="1269" width="11.1111%" height="15" fill="rgb(230,137,11)"/><text x="3.1740%" y="1279.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (19 samples, 11.11%)</title><rect x="2.9240%" y="1253" width="11.1111%" height="15" fill="rgb(212,28,1)"/><text x="3.1740%" y="1263.50">&lt;alloc::boxed::B..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (19 samples, 11.11%)</title><rect x="2.9240%" y="1237" width="11.1111%" height="15" fill="rgb(248,164,17)"/><text x="3.1740%" y="1247.50">core::ops::funct..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (19 samples, 11.11%)</title><rect x="2.9240%" y="1221" width="11.1111%" height="15" fill="rgb(222,171,42)"/><text x="3.1740%" y="1231.50">std::thread::Bui..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.58%)</title><rect x="13.4503%" y="1205" width="0.5848%" height="15" fill="rgb(243,84,45)"/><text x="13.7003%" y="1215.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.58%)</title><rect x="13.4503%" y="1189" width="0.5848%" height="15" fill="rgb(252,49,23)"/><text x="13.7003%" y="1199.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.58%)</title><rect x="13.4503%" y="1173" width="0.5848%" height="15" fill="rgb(215,19,7)"/><text x="13.7003%" y="1183.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.58%)</title><rect x="13.4503%" y="1157" width="0.5848%" height="15" fill="rgb(238,81,41)"/><text x="13.7003%" y="1167.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.58%)</title><rect x="13.4503%" y="1141" width="0.5848%" height="15" fill="rgb(210,199,37)"/><text x="13.7003%" y="1151.50"></text></g><g><title>new_heap (1 samples, 0.58%)</title><rect x="13.4503%" y="1125" width="0.5848%" height="15" fill="rgb(244,192,49)"/><text x="13.7003%" y="1135.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.58%)</title><rect x="13.4503%" y="1109" width="0.5848%" height="15" fill="rgb(226,211,11)"/><text x="13.7003%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="13.4503%" y="1093" width="0.5848%" height="15" fill="rgb(236,162,54)"/><text x="13.7003%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="13.4503%" y="1077" width="0.5848%" height="15" fill="rgb(220,229,9)"/><text x="13.7003%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="13.4503%" y="1061" width="0.5848%" height="15" fill="rgb(250,87,22)"/><text x="13.7003%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="13.4503%" y="1045" width="0.5848%" height="15" fill="rgb(239,43,17)"/><text x="13.7003%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="13.4503%" y="1029" width="0.5848%" height="15" fill="rgb(231,177,25)"/><text x="13.7003%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="13.4503%" y="1013" width="0.5848%" height="15" fill="rgb(219,179,1)"/><text x="13.7003%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="13.4503%" y="997" width="0.5848%" height="15" fill="rgb(238,219,53)"/><text x="13.7003%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.58%)</title><rect x="14.0351%" y="1205" width="0.5848%" height="15" fill="rgb(232,167,36)"/><text x="14.2851%" y="1215.50"></text></g><g><title>std::panicking::try (1 samples, 0.58%)</title><rect x="14.0351%" y="1189" width="0.5848%" height="15" fill="rgb(244,19,51)"/><text x="14.2851%" y="1199.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.58%)</title><rect x="14.0351%" y="1173" width="0.5848%" height="15" fill="rgb(224,6,22)"/><text x="14.2851%" y="1183.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.58%)</title><rect x="14.0351%" y="1157" width="0.5848%" height="15" fill="rgb(224,145,5)"/><text x="14.2851%" y="1167.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1 samples, 0.58%)</title><rect x="14.0351%" y="1141" width="0.5848%" height="15" fill="rgb(234,130,49)"/><text x="14.2851%" y="1151.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.58%)</title><rect x="14.0351%" y="1125" width="0.5848%" height="15" fill="rgb(254,6,2)"/><text x="14.2851%" y="1135.50"></text></g><g><title>actix_server::accept::Accept::start::{{closure}} (1 samples, 0.58%)</title><rect x="14.0351%" y="1109" width="0.5848%" height="15" fill="rgb(208,96,46)"/><text x="14.2851%" y="1119.50"></text></g><g><title>actix_server::accept::Accept::poll_with (1 samples, 0.58%)</title><rect x="14.0351%" y="1093" width="0.5848%" height="15" fill="rgb(239,3,39)"/><text x="14.2851%" y="1103.50"></text></g><g><title>mio::event::events::Events::with_capacity (1 samples, 0.58%)</title><rect x="14.0351%" y="1077" width="0.5848%" height="15" fill="rgb(233,210,1)"/><text x="14.2851%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.58%)</title><rect x="14.0351%" y="1061" width="0.5848%" height="15" fill="rgb(244,137,37)"/><text x="14.2851%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.58%)</title><rect x="14.0351%" y="1045" width="0.5848%" height="15" fill="rgb(240,136,2)"/><text x="14.2851%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.58%)</title><rect x="14.0351%" y="1029" width="0.5848%" height="15" fill="rgb(239,18,37)"/><text x="14.2851%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.58%)</title><rect x="14.0351%" y="1013" width="0.5848%" height="15" fill="rgb(218,185,22)"/><text x="14.2851%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.58%)</title><rect x="14.0351%" y="997" width="0.5848%" height="15" fill="rgb(225,218,4)"/><text x="14.2851%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.58%)</title><rect x="14.0351%" y="981" width="0.5848%" height="15" fill="rgb(230,182,32)"/><text x="14.2851%" y="991.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.58%)</title><rect x="14.0351%" y="965" width="0.5848%" height="15" fill="rgb(242,56,43)"/><text x="14.2851%" y="975.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.58%)</title><rect x="14.0351%" y="949" width="0.5848%" height="15" fill="rgb(233,99,24)"/><text x="14.2851%" y="959.50"></text></g><g><title>_int_malloc (1 samples, 0.58%)</title><rect x="14.0351%" y="933" width="0.5848%" height="15" fill="rgb(234,209,42)"/><text x="14.2851%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.0351%" y="917" width="0.5848%" height="15" fill="rgb(227,7,12)"/><text x="14.2851%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.0351%" y="901" width="0.5848%" height="15" fill="rgb(245,203,43)"/><text x="14.2851%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.0351%" y="885" width="0.5848%" height="15" fill="rgb(238,205,33)"/><text x="14.2851%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.0351%" y="869" width="0.5848%" height="15" fill="rgb(231,56,7)"/><text x="14.2851%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.0351%" y="853" width="0.5848%" height="15" fill="rgb(244,186,29)"/><text x="14.2851%" y="863.50"></text></g><g><title>actix-server_ac (2 samples, 1.17%)</title><rect x="14.0351%" y="1333" width="1.1696%" height="15" fill="rgb(234,111,31)"/><text x="14.2851%" y="1343.50"></text></g><g><title>__GI___clone (2 samples, 1.17%)</title><rect x="14.0351%" y="1317" width="1.1696%" height="15" fill="rgb(241,149,10)"/><text x="14.2851%" y="1327.50"></text></g><g><title>start_thread (2 samples, 1.17%)</title><rect x="14.0351%" y="1301" width="1.1696%" height="15" fill="rgb(249,206,44)"/><text x="14.2851%" y="1311.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 1.17%)</title><rect x="14.0351%" y="1285" width="1.1696%" height="15" fill="rgb(251,153,30)"/><text x="14.2851%" y="1295.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 1.17%)</title><rect x="14.0351%" y="1269" width="1.1696%" height="15" fill="rgb(239,152,38)"/><text x="14.2851%" y="1279.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 1.17%)</title><rect x="14.0351%" y="1253" width="1.1696%" height="15" fill="rgb(249,139,47)"/><text x="14.2851%" y="1263.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 1.17%)</title><rect x="14.0351%" y="1237" width="1.1696%" height="15" fill="rgb(244,64,35)"/><text x="14.2851%" y="1247.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (2 samples, 1.17%)</title><rect x="14.0351%" y="1221" width="1.1696%" height="15" fill="rgb(216,46,15)"/><text x="14.2851%" y="1231.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.58%)</title><rect x="14.6199%" y="1205" width="0.5848%" height="15" fill="rgb(250,74,19)"/><text x="14.8699%" y="1215.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.58%)</title><rect x="14.6199%" y="1189" width="0.5848%" height="15" fill="rgb(249,42,33)"/><text x="14.8699%" y="1199.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.58%)</title><rect x="14.6199%" y="1173" width="0.5848%" height="15" fill="rgb(242,149,17)"/><text x="14.8699%" y="1183.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.58%)</title><rect x="14.6199%" y="1157" width="0.5848%" height="15" fill="rgb(244,29,21)"/><text x="14.8699%" y="1167.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.58%)</title><rect x="14.6199%" y="1141" width="0.5848%" height="15" fill="rgb(220,130,37)"/><text x="14.8699%" y="1151.50"></text></g><g><title>new_heap (1 samples, 0.58%)</title><rect x="14.6199%" y="1125" width="0.5848%" height="15" fill="rgb(211,67,2)"/><text x="14.8699%" y="1135.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.58%)</title><rect x="14.6199%" y="1109" width="0.5848%" height="15" fill="rgb(235,68,52)"/><text x="14.8699%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.6199%" y="1093" width="0.5848%" height="15" fill="rgb(246,142,3)"/><text x="14.8699%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.6199%" y="1077" width="0.5848%" height="15" fill="rgb(241,25,7)"/><text x="14.8699%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.6199%" y="1061" width="0.5848%" height="15" fill="rgb(242,119,39)"/><text x="14.8699%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.6199%" y="1045" width="0.5848%" height="15" fill="rgb(241,98,45)"/><text x="14.8699%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.6199%" y="1029" width="0.5848%" height="15" fill="rgb(254,28,30)"/><text x="14.8699%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.6199%" y="1013" width="0.5848%" height="15" fill="rgb(241,142,54)"/><text x="14.8699%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="14.6199%" y="997" width="0.5848%" height="15" fill="rgb(222,85,15)"/><text x="14.8699%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.58%)</title><rect x="15.2047%" y="1205" width="0.5848%" height="15" fill="rgb(210,85,47)"/><text x="15.4547%" y="1215.50"></text></g><g><title>std::panicking::try (1 samples, 0.58%)</title><rect x="15.2047%" y="1189" width="0.5848%" height="15" fill="rgb(224,206,25)"/><text x="15.4547%" y="1199.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.58%)</title><rect x="15.2047%" y="1173" width="0.5848%" height="15" fill="rgb(243,201,19)"/><text x="15.4547%" y="1183.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.58%)</title><rect x="15.2047%" y="1157" width="0.5848%" height="15" fill="rgb(236,59,4)"/><text x="15.4547%" y="1167.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1 samples, 0.58%)</title><rect x="15.2047%" y="1141" width="0.5848%" height="15" fill="rgb(254,179,45)"/><text x="15.4547%" y="1151.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.58%)</title><rect x="15.2047%" y="1125" width="0.5848%" height="15" fill="rgb(226,14,10)"/><text x="15.4547%" y="1135.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.58%)</title><rect x="15.2047%" y="1109" width="0.5848%" height="15" fill="rgb(244,27,41)"/><text x="15.4547%" y="1119.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.58%)</title><rect x="15.2047%" y="1093" width="0.5848%" height="15" fill="rgb(235,35,32)"/><text x="15.4547%" y="1103.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (1 samples, 0.58%)</title><rect x="15.2047%" y="1077" width="0.5848%" height="15" fill="rgb(218,68,31)"/><text x="15.4547%" y="1087.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 0.58%)</title><rect x="15.2047%" y="1061" width="0.5848%" height="15" fill="rgb(207,120,37)"/><text x="15.4547%" y="1071.50"></text></g><g><title>main-tokio (2 samples, 1.17%)</title><rect x="15.2047%" y="1333" width="1.1696%" height="15" fill="rgb(227,98,0)"/><text x="15.4547%" y="1343.50"></text></g><g><title>__GI___clone (2 samples, 1.17%)</title><rect x="15.2047%" y="1317" width="1.1696%" height="15" fill="rgb(207,7,3)"/><text x="15.4547%" y="1327.50"></text></g><g><title>start_thread (2 samples, 1.17%)</title><rect x="15.2047%" y="1301" width="1.1696%" height="15" fill="rgb(206,98,19)"/><text x="15.4547%" y="1311.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 1.17%)</title><rect x="15.2047%" y="1285" width="1.1696%" height="15" fill="rgb(217,5,26)"/><text x="15.4547%" y="1295.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 1.17%)</title><rect x="15.2047%" y="1269" width="1.1696%" height="15" fill="rgb(235,190,38)"/><text x="15.4547%" y="1279.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 1.17%)</title><rect x="15.2047%" y="1253" width="1.1696%" height="15" fill="rgb(247,86,24)"/><text x="15.4547%" y="1263.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 1.17%)</title><rect x="15.2047%" y="1237" width="1.1696%" height="15" fill="rgb(205,101,16)"/><text x="15.4547%" y="1247.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (2 samples, 1.17%)</title><rect x="15.2047%" y="1221" width="1.1696%" height="15" fill="rgb(246,168,33)"/><text x="15.4547%" y="1231.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.58%)</title><rect x="15.7895%" y="1205" width="0.5848%" height="15" fill="rgb(231,114,1)"/><text x="16.0395%" y="1215.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.58%)</title><rect x="15.7895%" y="1189" width="0.5848%" height="15" fill="rgb(207,184,53)"/><text x="16.0395%" y="1199.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.58%)</title><rect x="15.7895%" y="1173" width="0.5848%" height="15" fill="rgb(224,95,51)"/><text x="16.0395%" y="1183.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.58%)</title><rect x="15.7895%" y="1157" width="0.5848%" height="15" fill="rgb(212,188,45)"/><text x="16.0395%" y="1167.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.58%)</title><rect x="15.7895%" y="1141" width="0.5848%" height="15" fill="rgb(223,154,38)"/><text x="16.0395%" y="1151.50"></text></g><g><title>new_heap (1 samples, 0.58%)</title><rect x="15.7895%" y="1125" width="0.5848%" height="15" fill="rgb(251,22,52)"/><text x="16.0395%" y="1135.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.58%)</title><rect x="15.7895%" y="1109" width="0.5848%" height="15" fill="rgb(229,209,22)"/><text x="16.0395%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="15.7895%" y="1093" width="0.5848%" height="15" fill="rgb(234,138,34)"/><text x="16.0395%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="15.7895%" y="1077" width="0.5848%" height="15" fill="rgb(212,95,11)"/><text x="16.0395%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="15.7895%" y="1061" width="0.5848%" height="15" fill="rgb(240,179,47)"/><text x="16.0395%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="15.7895%" y="1045" width="0.5848%" height="15" fill="rgb(240,163,11)"/><text x="16.0395%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="15.7895%" y="1029" width="0.5848%" height="15" fill="rgb(236,37,12)"/><text x="16.0395%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="15.7895%" y="1013" width="0.5848%" height="15" fill="rgb(232,164,16)"/><text x="16.0395%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="15.7895%" y="997" width="0.5848%" height="15" fill="rgb(244,205,15)"/><text x="16.0395%" y="1007.50"></text></g><g><title>__spawni_child (5 samples, 2.92%)</title><rect x="16.3743%" y="1301" width="2.9240%" height="15" fill="rgb(223,117,47)"/><text x="16.6243%" y="1311.50">__..</text></g><g><title>__GI___libc_sigaction (5 samples, 2.92%)</title><rect x="16.3743%" y="1285" width="2.9240%" height="15" fill="rgb(244,107,35)"/><text x="16.6243%" y="1295.50">__..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="16.3743%" y="1269" width="2.9240%" height="15" fill="rgb(205,140,8)"/><text x="16.6243%" y="1279.50">[u..</text></g><g><title>[unknown] (4 samples, 2.34%)</title><rect x="16.9591%" y="1253" width="2.3392%" height="15" fill="rgb(228,84,46)"/><text x="17.2091%" y="1263.50">[..</text></g><g><title>[unknown] (4 samples, 2.34%)</title><rect x="16.9591%" y="1237" width="2.3392%" height="15" fill="rgb(254,188,9)"/><text x="17.2091%" y="1247.50">[..</text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="17.5439%" y="1221" width="1.7544%" height="15" fill="rgb(206,112,54)"/><text x="17.7939%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="18.7135%" y="1205" width="0.5848%" height="15" fill="rgb(216,84,49)"/><text x="18.9635%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 3.51%)</title><rect x="16.3743%" y="1317" width="3.5088%" height="15" fill="rgb(214,194,35)"/><text x="16.6243%" y="1327.50">[un..</text></g><g><title>mining_proxy::main (1 samples, 0.58%)</title><rect x="19.2982%" y="1301" width="0.5848%" height="15" fill="rgb(249,28,3)"/><text x="19.5482%" y="1311.50"></text></g><g><title>mining_proxy::tokio_main (1 samples, 0.58%)</title><rect x="19.2982%" y="1285" width="0.5848%" height="15" fill="rgb(222,56,52)"/><text x="19.5482%" y="1295.50"></text></g><g><title>tokio::runtime::Runtime::block_on (1 samples, 0.58%)</title><rect x="19.2982%" y="1269" width="0.5848%" height="15" fill="rgb(245,217,50)"/><text x="19.5482%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (1 samples, 0.58%)</title><rect x="19.2982%" y="1253" width="0.5848%" height="15" fill="rgb(213,201,24)"/><text x="19.5482%" y="1263.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (1 samples, 0.58%)</title><rect x="19.2982%" y="1237" width="0.5848%" height="15" fill="rgb(248,116,28)"/><text x="19.5482%" y="1247.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (1 samples, 0.58%)</title><rect x="19.2982%" y="1221" width="0.5848%" height="15" fill="rgb(219,72,43)"/><text x="19.5482%" y="1231.50"></text></g><g><title>tokio::coop::budget (1 samples, 0.58%)</title><rect x="19.2982%" y="1205" width="0.5848%" height="15" fill="rgb(209,138,14)"/><text x="19.5482%" y="1215.50"></text></g><g><title>tokio::coop::with_budget (1 samples, 0.58%)</title><rect x="19.2982%" y="1189" width="0.5848%" height="15" fill="rgb(222,18,33)"/><text x="19.5482%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.58%)</title><rect x="19.2982%" y="1173" width="0.5848%" height="15" fill="rgb(213,199,7)"/><text x="19.5482%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.58%)</title><rect x="19.2982%" y="1157" width="0.5848%" height="15" fill="rgb(250,110,10)"/><text x="19.5482%" y="1167.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.58%)</title><rect x="19.2982%" y="1141" width="0.5848%" height="15" fill="rgb(248,123,6)"/><text x="19.5482%" y="1151.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (1 samples, 0.58%)</title><rect x="19.2982%" y="1125" width="0.5848%" height="15" fill="rgb(206,91,31)"/><text x="19.5482%" y="1135.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="19.2982%" y="1109" width="0.5848%" height="15" fill="rgb(211,154,13)"/><text x="19.5482%" y="1119.50"></text></g><g><title>mining_proxy::tokio_main::{{closure}} (1 samples, 0.58%)</title><rect x="19.2982%" y="1093" width="0.5848%" height="15" fill="rgb(225,148,7)"/><text x="19.5482%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="19.2982%" y="1077" width="0.5848%" height="15" fill="rgb(220,160,43)"/><text x="19.5482%" y="1087.50"></text></g><g><title>mining_proxy::tokio_run::{{closure}} (1 samples, 0.58%)</title><rect x="19.2982%" y="1061" width="0.5848%" height="15" fill="rgb(213,52,39)"/><text x="19.5482%" y="1071.50"></text></g><g><title>native_tls::Identity::from_pkcs12 (1 samples, 0.58%)</title><rect x="19.2982%" y="1045" width="0.5848%" height="15" fill="rgb(243,137,7)"/><text x="19.5482%" y="1055.50"></text></g><g><title>native_tls::imp::Identity::from_pkcs12 (1 samples, 0.58%)</title><rect x="19.2982%" y="1029" width="0.5848%" height="15" fill="rgb(230,79,13)"/><text x="19.5482%" y="1039.50"></text></g><g><title>openssl::pkcs12::Pkcs12Ref::parse (1 samples, 0.58%)</title><rect x="19.2982%" y="1013" width="0.5848%" height="15" fill="rgb(247,105,23)"/><text x="19.5482%" y="1023.50"></text></g><g><title>PKCS12_parse (1 samples, 0.58%)</title><rect x="19.2982%" y="997" width="0.5848%" height="15" fill="rgb(223,179,41)"/><text x="19.5482%" y="1007.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.58%)</title><rect x="19.2982%" y="981" width="0.5848%" height="15" fill="rgb(218,9,34)"/><text x="19.5482%" y="991.50"></text></g><g><title>PKCS8_decrypt (1 samples, 0.58%)</title><rect x="19.2982%" y="965" width="0.5848%" height="15" fill="rgb(222,106,8)"/><text x="19.5482%" y="975.50"></text></g><g><title>PKCS12_item_decrypt_d2i (1 samples, 0.58%)</title><rect x="19.2982%" y="949" width="0.5848%" height="15" fill="rgb(211,220,0)"/><text x="19.5482%" y="959.50"></text></g><g><title>PKCS12_pbe_crypt (1 samples, 0.58%)</title><rect x="19.2982%" y="933" width="0.5848%" height="15" fill="rgb(229,52,16)"/><text x="19.5482%" y="943.50"></text></g><g><title>EVP_PBE_CipherInit (1 samples, 0.58%)</title><rect x="19.2982%" y="917" width="0.5848%" height="15" fill="rgb(212,155,18)"/><text x="19.5482%" y="927.50"></text></g><g><title>PKCS12_PBE_keyivgen (1 samples, 0.58%)</title><rect x="19.2982%" y="901" width="0.5848%" height="15" fill="rgb(242,21,14)"/><text x="19.5482%" y="911.50"></text></g><g><title>PKCS12_key_gen_utf8 (1 samples, 0.58%)</title><rect x="19.2982%" y="885" width="0.5848%" height="15" fill="rgb(222,19,48)"/><text x="19.5482%" y="895.50"></text></g><g><title>PKCS12_key_gen_uni (1 samples, 0.58%)</title><rect x="19.2982%" y="869" width="0.5848%" height="15" fill="rgb(232,45,27)"/><text x="19.5482%" y="879.50"></text></g><g><title>EVP_DigestFinal_ex (1 samples, 0.58%)</title><rect x="19.2982%" y="853" width="0.5848%" height="15" fill="rgb(249,103,42)"/><text x="19.5482%" y="863.50"></text></g><g><title>SHA1_Final (1 samples, 0.58%)</title><rect x="19.2982%" y="837" width="0.5848%" height="15" fill="rgb(246,81,33)"/><text x="19.5482%" y="847.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.58%)</title><rect x="19.2982%" y="821" width="0.5848%" height="15" fill="rgb(252,33,42)"/><text x="19.5482%" y="831.50"></text></g><g><title>[unknown] (7 samples, 4.09%)</title><rect x="20.4678%" y="1285" width="4.0936%" height="15" fill="rgb(209,212,41)"/><text x="20.7178%" y="1295.50">[unk..</text></g><g><title>[unknown] (7 samples, 4.09%)</title><rect x="20.4678%" y="1269" width="4.0936%" height="15" fill="rgb(207,154,6)"/><text x="20.7178%" y="1279.50">[unk..</text></g><g><title>[unknown] (7 samples, 4.09%)</title><rect x="20.4678%" y="1253" width="4.0936%" height="15" fill="rgb(223,64,47)"/><text x="20.7178%" y="1263.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.51%)</title><rect x="21.0526%" y="1237" width="3.5088%" height="15" fill="rgb(211,161,38)"/><text x="21.3026%" y="1247.50">[un..</text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="23.3918%" y="1221" width="1.1696%" height="15" fill="rgb(219,138,40)"/><text x="23.6418%" y="1231.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 7.02%)</title><rect x="24.5614%" y="1269" width="7.0175%" height="15" fill="rgb(241,228,46)"/><text x="24.8114%" y="1279.50">&lt;alloc::b..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 7.02%)</title><rect x="24.5614%" y="1253" width="7.0175%" height="15" fill="rgb(223,209,38)"/><text x="24.8114%" y="1263.50">&lt;alloc::b..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (12 samples, 7.02%)</title><rect x="24.5614%" y="1237" width="7.0175%" height="15" fill="rgb(236,164,45)"/><text x="24.8114%" y="1247.50">core::ops..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (12 samples, 7.02%)</title><rect x="24.5614%" y="1221" width="7.0175%" height="15" fill="rgb(231,15,5)"/><text x="24.8114%" y="1231.50">std::thre..</text></g><g><title>std::sys::unix::thread::Thread::set_name (12 samples, 7.02%)</title><rect x="24.5614%" y="1205" width="7.0175%" height="15" fill="rgb(252,35,15)"/><text x="24.8114%" y="1215.50">std::sys:..</text></g><g><title>__GI___prctl (12 samples, 7.02%)</title><rect x="24.5614%" y="1189" width="7.0175%" height="15" fill="rgb(248,181,18)"/><text x="24.8114%" y="1199.50">__GI___pr..</text></g><g><title>[unknown] (12 samples, 7.02%)</title><rect x="24.5614%" y="1173" width="7.0175%" height="15" fill="rgb(233,39,42)"/><text x="24.8114%" y="1183.50">[unknown]</text></g><g><title>[unknown] (12 samples, 7.02%)</title><rect x="24.5614%" y="1157" width="7.0175%" height="15" fill="rgb(238,110,33)"/><text x="24.8114%" y="1167.50">[unknown]</text></g><g><title>[unknown] (12 samples, 7.02%)</title><rect x="24.5614%" y="1141" width="7.0175%" height="15" fill="rgb(233,195,10)"/><text x="24.8114%" y="1151.50">[unknown]</text></g><g><title>[unknown] (9 samples, 5.26%)</title><rect x="26.3158%" y="1125" width="5.2632%" height="15" fill="rgb(254,105,3)"/><text x="26.5658%" y="1135.50">[unkno..</text></g><g><title>[unknown] (6 samples, 3.51%)</title><rect x="28.0702%" y="1109" width="3.5088%" height="15" fill="rgb(221,225,9)"/><text x="28.3202%" y="1119.50">[un..</text></g><g><title>[unknown] (4 samples, 2.34%)</title><rect x="29.2398%" y="1093" width="2.3392%" height="15" fill="rgb(224,227,45)"/><text x="29.4898%" y="1103.50">[..</text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="29.8246%" y="1077" width="1.7544%" height="15" fill="rgb(229,198,43)"/><text x="30.0746%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="30.4094%" y="1061" width="1.1696%" height="15" fill="rgb(206,209,35)"/><text x="30.6594%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="30.9942%" y="1045" width="0.5848%" height="15" fill="rgb(245,195,53)"/><text x="31.2442%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.58%)</title><rect x="31.5789%" y="1237" width="0.5848%" height="15" fill="rgb(240,92,26)"/><text x="31.8289%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.58%)</title><rect x="31.5789%" y="1221" width="0.5848%" height="15" fill="rgb(207,40,23)"/><text x="31.8289%" y="1231.50"></text></g><g><title>__GI___mmap64 (18 samples, 10.53%)</title><rect x="32.1637%" y="1205" width="10.5263%" height="15" fill="rgb(223,111,35)"/><text x="32.4137%" y="1215.50">__GI___mmap64</text></g><g><title>[unknown] (18 samples, 10.53%)</title><rect x="32.1637%" y="1189" width="10.5263%" height="15" fill="rgb(229,147,28)"/><text x="32.4137%" y="1199.50">[unknown]</text></g><g><title>[unknown] (17 samples, 9.94%)</title><rect x="32.7485%" y="1173" width="9.9415%" height="15" fill="rgb(211,29,28)"/><text x="32.9985%" y="1183.50">[unknown]</text></g><g><title>[unknown] (17 samples, 9.94%)</title><rect x="32.7485%" y="1157" width="9.9415%" height="15" fill="rgb(228,72,33)"/><text x="32.9985%" y="1167.50">[unknown]</text></g><g><title>[unknown] (17 samples, 9.94%)</title><rect x="32.7485%" y="1141" width="9.9415%" height="15" fill="rgb(205,214,31)"/><text x="32.9985%" y="1151.50">[unknown]</text></g><g><title>[unknown] (10 samples, 5.85%)</title><rect x="36.8421%" y="1125" width="5.8480%" height="15" fill="rgb(224,111,15)"/><text x="37.0921%" y="1135.50">[unknow..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="39.7661%" y="1109" width="2.9240%" height="15" fill="rgb(253,21,26)"/><text x="40.0161%" y="1119.50">[u..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="39.7661%" y="1093" width="2.9240%" height="15" fill="rgb(245,139,43)"/><text x="40.0161%" y="1103.50">[u..</text></g><g><title>__GI___mprotect (18 samples, 10.53%)</title><rect x="42.6901%" y="1205" width="10.5263%" height="15" fill="rgb(252,170,7)"/><text x="42.9401%" y="1215.50">__GI___mprotect</text></g><g><title>[unknown] (18 samples, 10.53%)</title><rect x="42.6901%" y="1189" width="10.5263%" height="15" fill="rgb(231,118,14)"/><text x="42.9401%" y="1199.50">[unknown]</text></g><g><title>[unknown] (18 samples, 10.53%)</title><rect x="42.6901%" y="1173" width="10.5263%" height="15" fill="rgb(238,83,0)"/><text x="42.9401%" y="1183.50">[unknown]</text></g><g><title>[unknown] (18 samples, 10.53%)</title><rect x="42.6901%" y="1157" width="10.5263%" height="15" fill="rgb(221,39,39)"/><text x="42.9401%" y="1167.50">[unknown]</text></g><g><title>[unknown] (18 samples, 10.53%)</title><rect x="42.6901%" y="1141" width="10.5263%" height="15" fill="rgb(222,119,46)"/><text x="42.9401%" y="1151.50">[unknown]</text></g><g><title>[unknown] (18 samples, 10.53%)</title><rect x="42.6901%" y="1125" width="10.5263%" height="15" fill="rgb(222,165,49)"/><text x="42.9401%" y="1135.50">[unknown]</text></g><g><title>[unknown] (18 samples, 10.53%)</title><rect x="42.6901%" y="1109" width="10.5263%" height="15" fill="rgb(219,113,52)"/><text x="42.9401%" y="1119.50">[unknown]</text></g><g><title>[unknown] (11 samples, 6.43%)</title><rect x="46.7836%" y="1093" width="6.4327%" height="15" fill="rgb(214,7,15)"/><text x="47.0336%" y="1103.50">[unknown]</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="50.2924%" y="1077" width="2.9240%" height="15" fill="rgb(235,32,4)"/><text x="50.5424%" y="1087.50">[u..</text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="51.4620%" y="1061" width="1.7544%" height="15" fill="rgb(238,90,54)"/><text x="51.7120%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="52.0468%" y="1045" width="1.1696%" height="15" fill="rgb(213,208,19)"/><text x="52.2968%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="52.6316%" y="1029" width="0.5848%" height="15" fill="rgb(233,156,4)"/><text x="52.8816%" y="1039.50"></text></g><g><title>__GI___clone (59 samples, 34.50%)</title><rect x="19.8830%" y="1317" width="34.5029%" height="15" fill="rgb(207,194,5)"/><text x="20.1330%" y="1327.50">__GI___clone</text></g><g><title>start_thread (59 samples, 34.50%)</title><rect x="19.8830%" y="1301" width="34.5029%" height="15" fill="rgb(206,111,30)"/><text x="20.1330%" y="1311.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (51 samples, 29.82%)</title><rect x="24.5614%" y="1285" width="29.8246%" height="15" fill="rgb(243,70,54)"/><text x="24.8114%" y="1295.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (39 samples, 22.81%)</title><rect x="31.5789%" y="1269" width="22.8070%" height="15" fill="rgb(242,28,8)"/><text x="31.8289%" y="1279.50">std::sys::unix::stack_overflow::Hand..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (39 samples, 22.81%)</title><rect x="31.5789%" y="1253" width="22.8070%" height="15" fill="rgb(219,106,18)"/><text x="31.8289%" y="1263.50">std::sys::unix::stack_overflow::imp:..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (38 samples, 22.22%)</title><rect x="32.1637%" y="1237" width="22.2222%" height="15" fill="rgb(244,222,10)"/><text x="32.4137%" y="1247.50">std::sys::unix::stack_overflow::imp..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (38 samples, 22.22%)</title><rect x="32.1637%" y="1221" width="22.2222%" height="15" fill="rgb(236,179,52)"/><text x="32.4137%" y="1231.50">std::sys::unix::stack_overflow::imp..</text></g><g><title>std::sys::unix::os::page_size (2 samples, 1.17%)</title><rect x="53.2164%" y="1205" width="1.1696%" height="15" fill="rgb(213,23,39)"/><text x="53.4664%" y="1215.50"></text></g><g><title>__GI___sysconf (2 samples, 1.17%)</title><rect x="53.2164%" y="1189" width="1.1696%" height="15" fill="rgb(238,48,10)"/><text x="53.4664%" y="1199.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.58%)</title><rect x="53.8012%" y="1173" width="0.5848%" height="15" fill="rgb(251,196,23)"/><text x="54.0512%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1301" width="0.5848%" height="15" fill="rgb(250,152,24)"/><text x="54.6360%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1285" width="0.5848%" height="15" fill="rgb(209,150,17)"/><text x="54.6360%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1269" width="0.5848%" height="15" fill="rgb(234,202,34)"/><text x="54.6360%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1253" width="0.5848%" height="15" fill="rgb(253,148,53)"/><text x="54.6360%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1237" width="0.5848%" height="15" fill="rgb(218,129,16)"/><text x="54.6360%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1221" width="0.5848%" height="15" fill="rgb(216,85,19)"/><text x="54.6360%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1205" width="0.5848%" height="15" fill="rgb(235,228,7)"/><text x="54.6360%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="54.3860%" y="1189" width="0.5848%" height="15" fill="rgb(245,175,0)"/><text x="54.6360%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="54.9708%" y="1285" width="1.7544%" height="15" fill="rgb(208,168,36)"/><text x="55.2208%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="55.5556%" y="1269" width="1.1696%" height="15" fill="rgb(246,171,24)"/><text x="55.8056%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="55.5556%" y="1253" width="1.1696%" height="15" fill="rgb(215,142,24)"/><text x="55.8056%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="55.5556%" y="1237" width="1.1696%" height="15" fill="rgb(250,187,7)"/><text x="55.8056%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="55.5556%" y="1221" width="1.1696%" height="15" fill="rgb(228,66,33)"/><text x="55.8056%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="55.5556%" y="1205" width="1.1696%" height="15" fill="rgb(234,215,21)"/><text x="55.8056%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="55.5556%" y="1189" width="1.1696%" height="15" fill="rgb(222,191,20)"/><text x="55.8056%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="56.1404%" y="1173" width="0.5848%" height="15" fill="rgb(245,79,54)"/><text x="56.3904%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="56.1404%" y="1157" width="0.5848%" height="15" fill="rgb(240,10,37)"/><text x="56.3904%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="56.1404%" y="1141" width="0.5848%" height="15" fill="rgb(214,192,32)"/><text x="56.3904%" y="1151.50"></text></g><g><title>__rtld_malloc_init_stubs (1 samples, 0.58%)</title><rect x="56.7251%" y="1285" width="0.5848%" height="15" fill="rgb(209,36,54)"/><text x="56.9751%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="56.7251%" y="1269" width="0.5848%" height="15" fill="rgb(220,10,11)"/><text x="56.9751%" y="1279.50"></text></g><g><title>__brk (1 samples, 0.58%)</title><rect x="57.3099%" y="1269" width="0.5848%" height="15" fill="rgb(221,106,17)"/><text x="57.5599%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.3099%" y="1253" width="0.5848%" height="15" fill="rgb(251,142,44)"/><text x="57.5599%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1237" width="0.5848%" height="15" fill="rgb(238,13,15)"/><text x="58.1447%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1221" width="0.5848%" height="15" fill="rgb(208,107,27)"/><text x="58.1447%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1205" width="0.5848%" height="15" fill="rgb(205,136,37)"/><text x="58.1447%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1189" width="0.5848%" height="15" fill="rgb(250,205,27)"/><text x="58.1447%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1173" width="0.5848%" height="15" fill="rgb(210,80,43)"/><text x="58.1447%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1157" width="0.5848%" height="15" fill="rgb(247,160,36)"/><text x="58.1447%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1141" width="0.5848%" height="15" fill="rgb(234,13,49)"/><text x="58.1447%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="57.8947%" y="1125" width="0.5848%" height="15" fill="rgb(234,122,0)"/><text x="58.1447%" y="1135.50"></text></g><g><title>dl_main (2 samples, 1.17%)</title><rect x="57.8947%" y="1269" width="1.1696%" height="15" fill="rgb(207,146,38)"/><text x="58.1447%" y="1279.50"></text></g><g><title>_dl_relocate_object (2 samples, 1.17%)</title><rect x="57.8947%" y="1253" width="1.1696%" height="15" fill="rgb(207,177,25)"/><text x="58.1447%" y="1263.50"></text></g><g><title>_dl_protect_relro (1 samples, 0.58%)</title><rect x="58.4795%" y="1237" width="0.5848%" height="15" fill="rgb(211,178,42)"/><text x="58.7295%" y="1247.50"></text></g><g><title>__mprotect (1 samples, 0.58%)</title><rect x="58.4795%" y="1221" width="0.5848%" height="15" fill="rgb(230,69,54)"/><text x="58.7295%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="58.4795%" y="1205" width="0.5848%" height="15" fill="rgb(214,135,41)"/><text x="58.7295%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="58.4795%" y="1189" width="0.5848%" height="15" fill="rgb(237,67,25)"/><text x="58.7295%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="58.4795%" y="1173" width="0.5848%" height="15" fill="rgb(222,189,50)"/><text x="58.7295%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="58.4795%" y="1157" width="0.5848%" height="15" fill="rgb(245,148,34)"/><text x="58.7295%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="58.4795%" y="1141" width="0.5848%" height="15" fill="rgb(222,29,6)"/><text x="58.7295%" y="1151.50"></text></g><g><title>mining_proxy (74 samples, 43.27%)</title><rect x="16.3743%" y="1333" width="43.2749%" height="15" fill="rgb(221,189,43)"/><text x="16.6243%" y="1343.50">mining_proxy</text></g><g><title>_start (9 samples, 5.26%)</title><rect x="54.3860%" y="1317" width="5.2632%" height="15" fill="rgb(207,36,27)"/><text x="54.6360%" y="1327.50">_start</text></g><g><title>_dl_start (8 samples, 4.68%)</title><rect x="54.9708%" y="1301" width="4.6784%" height="15" fill="rgb(217,90,24)"/><text x="55.2208%" y="1311.50">_dl_s..</text></g><g><title>_dl_sysdep_start (4 samples, 2.34%)</title><rect x="57.3099%" y="1285" width="2.3392%" height="15" fill="rgb(224,66,35)"/><text x="57.5599%" y="1295.50">_..</text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.58%)</title><rect x="59.0643%" y="1269" width="0.5848%" height="15" fill="rgb(221,13,50)"/><text x="59.3143%" y="1279.50"></text></g><g><title>handle_amd (1 samples, 0.58%)</title><rect x="59.0643%" y="1253" width="0.5848%" height="15" fill="rgb(236,68,49)"/><text x="59.3143%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="59.6491%" y="1301" width="0.5848%" height="15" fill="rgb(229,146,28)"/><text x="59.8991%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="59.6491%" y="1285" width="0.5848%" height="15" fill="rgb(225,31,38)"/><text x="59.8991%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="59.6491%" y="1269" width="0.5848%" height="15" fill="rgb(250,208,3)"/><text x="59.8991%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="59.6491%" y="1253" width="0.5848%" height="15" fill="rgb(246,54,23)"/><text x="59.8991%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="59.6491%" y="1237" width="0.5848%" height="15" fill="rgb(243,76,11)"/><text x="59.8991%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="59.6491%" y="1221" width="0.5848%" height="15" fill="rgb(245,21,50)"/><text x="59.8991%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="59.6491%" y="1205" width="0.5848%" height="15" fill="rgb(228,9,43)"/><text x="59.8991%" y="1215.50"></text></g><g><title>__GI___get_nprocs (1 samples, 0.58%)</title><rect x="60.2339%" y="1301" width="0.5848%" height="15" fill="rgb(208,100,47)"/><text x="60.4839%" y="1311.50"></text></g><g><title>next_line (1 samples, 0.58%)</title><rect x="60.2339%" y="1285" width="0.5848%" height="15" fill="rgb(232,26,8)"/><text x="60.4839%" y="1295.50"></text></g><g><title>__GI___read_nocancel (1 samples, 0.58%)</title><rect x="60.2339%" y="1269" width="0.5848%" height="15" fill="rgb(216,166,38)"/><text x="60.4839%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="60.2339%" y="1253" width="0.5848%" height="15" fill="rgb(251,202,51)"/><text x="60.4839%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="60.2339%" y="1237" width="0.5848%" height="15" fill="rgb(254,216,34)"/><text x="60.4839%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="60.2339%" y="1221" width="0.5848%" height="15" fill="rgb(251,32,27)"/><text x="60.4839%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="60.2339%" y="1205" width="0.5848%" height="15" fill="rgb(208,127,28)"/><text x="60.4839%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="60.2339%" y="1189" width="0.5848%" height="15" fill="rgb(224,137,22)"/><text x="60.4839%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="60.2339%" y="1173" width="0.5848%" height="15" fill="rgb(254,70,32)"/><text x="60.4839%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="60.2339%" y="1157" width="0.5848%" height="15" fill="rgb(229,75,37)"/><text x="60.4839%" y="1167.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="61.4035%" y="997" width="0.5848%" height="15" fill="rgb(252,64,23)"/><text x="61.6535%" y="1007.50"></text></g><g><title>mining_proxy::client::handle_stream_timer::write_rpc::{{closure}} (1 samples, 0.58%)</title><rect x="61.4035%" y="981" width="0.5848%" height="15" fill="rgb(232,162,48)"/><text x="61.6535%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="61.4035%" y="965" width="0.5848%" height="15" fill="rgb(246,160,12)"/><text x="61.6535%" y="975.50"></text></g><g><title>mining_proxy::client::write_to_socket::{{closure}} (1 samples, 0.58%)</title><rect x="61.4035%" y="949" width="0.5848%" height="15" fill="rgb(247,166,0)"/><text x="61.6535%" y="959.50"></text></g><g><title>&lt;tokio::io::util::write::Write&lt;W&gt; as core::future::future::Future&gt;::poll (1 samples, 0.58%)</title><rect x="61.4035%" y="933" width="0.5848%" height="15" fill="rgb(249,219,21)"/><text x="61.6535%" y="943.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.58%)</title><rect x="61.4035%" y="917" width="0.5848%" height="15" fill="rgb(205,209,3)"/><text x="61.6535%" y="927.50"></text></g><g><title>&lt;tokio::io::split::WriteHalf&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.58%)</title><rect x="61.4035%" y="901" width="0.5848%" height="15" fill="rgb(243,44,1)"/><text x="61.6535%" y="911.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.58%)</title><rect x="61.4035%" y="885" width="0.5848%" height="15" fill="rgb(206,159,16)"/><text x="61.6535%" y="895.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 0.58%)</title><rect x="61.4035%" y="869" width="0.5848%" height="15" fill="rgb(244,77,30)"/><text x="61.6535%" y="879.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 0.58%)</title><rect x="61.4035%" y="853" width="0.5848%" height="15" fill="rgb(218,69,12)"/><text x="61.6535%" y="863.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (1 samples, 0.58%)</title><rect x="61.4035%" y="837" width="0.5848%" height="15" fill="rgb(212,87,7)"/><text x="61.6535%" y="847.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (1 samples, 0.58%)</title><rect x="61.4035%" y="821" width="0.5848%" height="15" fill="rgb(245,114,25)"/><text x="61.6535%" y="831.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write::{{closure}} (1 samples, 0.58%)</title><rect x="61.4035%" y="805" width="0.5848%" height="15" fill="rgb(210,61,42)"/><text x="61.6535%" y="815.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 0.58%)</title><rect x="61.4035%" y="789" width="0.5848%" height="15" fill="rgb(211,52,33)"/><text x="61.6535%" y="799.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 0.58%)</title><rect x="61.4035%" y="773" width="0.5848%" height="15" fill="rgb(234,58,33)"/><text x="61.6535%" y="783.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (1 samples, 0.58%)</title><rect x="61.4035%" y="757" width="0.5848%" height="15" fill="rgb(220,115,36)"/><text x="61.6535%" y="767.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (1 samples, 0.58%)</title><rect x="61.4035%" y="741" width="0.5848%" height="15" fill="rgb(243,153,54)"/><text x="61.6535%" y="751.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.58%)</title><rect x="61.4035%" y="725" width="0.5848%" height="15" fill="rgb(251,47,18)"/><text x="61.6535%" y="735.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.58%)</title><rect x="61.4035%" y="709" width="0.5848%" height="15" fill="rgb(242,102,42)"/><text x="61.6535%" y="719.50"></text></g><g><title>__libc_send (1 samples, 0.58%)</title><rect x="61.4035%" y="693" width="0.5848%" height="15" fill="rgb(234,31,38)"/><text x="61.6535%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="61.4035%" y="677" width="0.5848%" height="15" fill="rgb(221,117,51)"/><text x="61.6535%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="61.4035%" y="661" width="0.5848%" height="15" fill="rgb(212,20,18)"/><text x="61.6535%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="61.4035%" y="645" width="0.5848%" height="15" fill="rgb(245,133,36)"/><text x="61.6535%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="61.4035%" y="629" width="0.5848%" height="15" fill="rgb(212,6,19)"/><text x="61.6535%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="61.4035%" y="613" width="0.5848%" height="15" fill="rgb(218,1,36)"/><text x="61.6535%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="61.4035%" y="597" width="0.5848%" height="15" fill="rgb(246,84,54)"/><text x="61.6535%" y="607.50"></text></g><g><title>tokio::io::util::read_line::finish_string_read (1 samples, 0.58%)</title><rect x="61.9883%" y="869" width="0.5848%" height="15" fill="rgb(242,110,6)"/><text x="62.2383%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.58%)</title><rect x="61.9883%" y="853" width="0.5848%" height="15" fill="rgb(214,47,5)"/><text x="62.2383%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.58%)</title><rect x="61.9883%" y="837" width="0.5848%" height="15" fill="rgb(218,159,25)"/><text x="62.2383%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.58%)</title><rect x="61.9883%" y="821" width="0.5848%" height="15" fill="rgb(215,211,28)"/><text x="62.2383%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.58%)</title><rect x="61.9883%" y="805" width="0.5848%" height="15" fill="rgb(238,59,32)"/><text x="62.2383%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.58%)</title><rect x="61.9883%" y="789" width="0.5848%" height="15" fill="rgb(226,82,3)"/><text x="62.2383%" y="799.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.58%)</title><rect x="62.5731%" y="821" width="0.5848%" height="15" fill="rgb(240,164,32)"/><text x="62.8231%" y="831.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.58%)</title><rect x="62.5731%" y="805" width="0.5848%" height="15" fill="rgb(232,46,7)"/><text x="62.8231%" y="815.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.58%)</title><rect x="62.5731%" y="789" width="0.5848%" height="15" fill="rgb(229,129,53)"/><text x="62.8231%" y="799.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (1 samples, 0.58%)</title><rect x="62.5731%" y="773" width="0.5848%" height="15" fill="rgb(234,188,29)"/><text x="62.8231%" y="783.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (1 samples, 0.58%)</title><rect x="62.5731%" y="757" width="0.5848%" height="15" fill="rgb(246,141,4)"/><text x="62.8231%" y="767.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (1 samples, 0.58%)</title><rect x="62.5731%" y="741" width="0.5848%" height="15" fill="rgb(229,23,39)"/><text x="62.8231%" y="751.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.58%)</title><rect x="62.5731%" y="725" width="0.5848%" height="15" fill="rgb(206,12,3)"/><text x="62.8231%" y="735.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 0.58%)</title><rect x="62.5731%" y="709" width="0.5848%" height="15" fill="rgb(252,226,20)"/><text x="62.8231%" y="719.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (1 samples, 0.58%)</title><rect x="62.5731%" y="693" width="0.5848%" height="15" fill="rgb(216,123,35)"/><text x="62.8231%" y="703.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (1 samples, 0.58%)</title><rect x="62.5731%" y="677" width="0.5848%" height="15" fill="rgb(212,68,40)"/><text x="62.8231%" y="687.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.58%)</title><rect x="62.5731%" y="661" width="0.5848%" height="15" fill="rgb(254,125,32)"/><text x="62.8231%" y="671.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.58%)</title><rect x="62.5731%" y="645" width="0.5848%" height="15" fill="rgb(253,97,22)"/><text x="62.8231%" y="655.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.58%)</title><rect x="62.5731%" y="629" width="0.5848%" height="15" fill="rgb(241,101,14)"/><text x="62.8231%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.58%)</title><rect x="62.5731%" y="613" width="0.5848%" height="15" fill="rgb(238,103,29)"/><text x="62.8231%" y="623.50"></text></g><g><title>__libc_recv (1 samples, 0.58%)</title><rect x="62.5731%" y="597" width="0.5848%" height="15" fill="rgb(233,195,47)"/><text x="62.8231%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="62.5731%" y="581" width="0.5848%" height="15" fill="rgb(246,218,30)"/><text x="62.8231%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="62.5731%" y="565" width="0.5848%" height="15" fill="rgb(219,145,47)"/><text x="62.8231%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="62.5731%" y="549" width="0.5848%" height="15" fill="rgb(243,12,26)"/><text x="62.8231%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="62.5731%" y="533" width="0.5848%" height="15" fill="rgb(214,87,16)"/><text x="62.8231%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="62.5731%" y="517" width="0.5848%" height="15" fill="rgb(208,99,42)"/><text x="62.8231%" y="527.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (2 samples, 1.17%)</title><rect x="62.5731%" y="853" width="1.1696%" height="15" fill="rgb(253,99,2)"/><text x="62.8231%" y="863.50"></text></g><g><title>&lt;tokio::io::split::ReadHalf&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 1.17%)</title><rect x="62.5731%" y="837" width="1.1696%" height="15" fill="rgb(220,168,23)"/><text x="62.8231%" y="847.50"></text></g><g><title>tokio::io::split::Inner&lt;T&gt;::poll_lock (1 samples, 0.58%)</title><rect x="63.1579%" y="821" width="0.5848%" height="15" fill="rgb(242,38,24)"/><text x="63.4079%" y="831.50"></text></g><g><title>tokio::io::util::lines::Lines&lt;R&gt;::next_line::{{closure}} (5 samples, 2.92%)</title><rect x="61.9883%" y="949" width="2.9240%" height="15" fill="rgb(225,182,9)"/><text x="62.2383%" y="959.50">to..</text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (5 samples, 2.92%)</title><rect x="61.9883%" y="933" width="2.9240%" height="15" fill="rgb(243,178,37)"/><text x="62.2383%" y="943.50">&lt;t..</text></g><g><title>tokio::io::util::lines::Lines&lt;R&gt;::next_line::{{closure}}::{{closure}} (5 samples, 2.92%)</title><rect x="61.9883%" y="917" width="2.9240%" height="15" fill="rgb(232,139,19)"/><text x="62.2383%" y="927.50">to..</text></g><g><title>tokio::io::util::lines::Lines&lt;R&gt;::poll_next_line (5 samples, 2.92%)</title><rect x="61.9883%" y="901" width="2.9240%" height="15" fill="rgb(225,201,24)"/><text x="62.2383%" y="911.50">to..</text></g><g><title>tokio::io::util::read_line::read_line_internal (5 samples, 2.92%)</title><rect x="61.9883%" y="885" width="2.9240%" height="15" fill="rgb(221,47,46)"/><text x="62.2383%" y="895.50">to..</text></g><g><title>tokio::io::util::read_until::read_until_internal (4 samples, 2.34%)</title><rect x="62.5731%" y="869" width="2.3392%" height="15" fill="rgb(249,23,13)"/><text x="62.8231%" y="879.50">t..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 1.17%)</title><rect x="63.7427%" y="853" width="1.1696%" height="15" fill="rgb(219,9,5)"/><text x="63.9927%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 1.17%)</title><rect x="63.7427%" y="837" width="1.1696%" height="15" fill="rgb(254,171,16)"/><text x="63.9927%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 1.17%)</title><rect x="63.7427%" y="821" width="1.1696%" height="15" fill="rgb(230,171,20)"/><text x="63.9927%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 1.17%)</title><rect x="63.7427%" y="805" width="1.1696%" height="15" fill="rgb(210,71,41)"/><text x="63.9927%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 1.17%)</title><rect x="63.7427%" y="789" width="1.1696%" height="15" fill="rgb(206,173,20)"/><text x="63.9927%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.17%)</title><rect x="63.7427%" y="773" width="1.1696%" height="15" fill="rgb(233,88,34)"/><text x="63.9927%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.17%)</title><rect x="63.7427%" y="757" width="1.1696%" height="15" fill="rgb(223,209,46)"/><text x="63.9927%" y="767.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.17%)</title><rect x="63.7427%" y="741" width="1.1696%" height="15" fill="rgb(250,43,18)"/><text x="63.9927%" y="751.50"></text></g><g><title>__GI___libc_malloc (2 samples, 1.17%)</title><rect x="63.7427%" y="725" width="1.1696%" height="15" fill="rgb(208,13,10)"/><text x="63.9927%" y="735.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (7 samples, 4.09%)</title><rect x="61.9883%" y="997" width="4.0936%" height="15" fill="rgb(212,200,36)"/><text x="62.2383%" y="1007.50">&lt;tok..</text></g><g><title>mining_proxy::client::handle_stream_timer::handle_stream::{{closure}}::{{closure}} (7 samples, 4.09%)</title><rect x="61.9883%" y="981" width="4.0936%" height="15" fill="rgb(225,90,30)"/><text x="62.2383%" y="991.50">mini..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 4.09%)</title><rect x="61.9883%" y="965" width="4.0936%" height="15" fill="rgb(236,182,39)"/><text x="62.2383%" y="975.50">&lt;cor..</text></g><g><title>tokio::io::util::split::Split&lt;R&gt;::next_segment::{{closure}} (2 samples, 1.17%)</title><rect x="64.9123%" y="949" width="1.1696%" height="15" fill="rgb(212,144,35)"/><text x="65.1623%" y="959.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 1.17%)</title><rect x="64.9123%" y="933" width="1.1696%" height="15" fill="rgb(228,63,44)"/><text x="65.1623%" y="943.50"></text></g><g><title>tokio::io::util::split::Split&lt;R&gt;::next_segment::{{closure}}::{{closure}} (2 samples, 1.17%)</title><rect x="64.9123%" y="917" width="1.1696%" height="15" fill="rgb(228,109,6)"/><text x="65.1623%" y="927.50"></text></g><g><title>tokio::io::util::split::Split&lt;R&gt;::poll_next_segment (2 samples, 1.17%)</title><rect x="64.9123%" y="901" width="1.1696%" height="15" fill="rgb(238,117,24)"/><text x="65.1623%" y="911.50"></text></g><g><title>tokio::io::util::read_until::read_until_internal (2 samples, 1.17%)</title><rect x="64.9123%" y="885" width="1.1696%" height="15" fill="rgb(242,26,26)"/><text x="65.1623%" y="895.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (1 samples, 0.58%)</title><rect x="65.4971%" y="869" width="0.5848%" height="15" fill="rgb(221,92,48)"/><text x="65.7471%" y="879.50"></text></g><g><title>&lt;tokio::io::split::ReadHalf&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.58%)</title><rect x="65.4971%" y="853" width="0.5848%" height="15" fill="rgb(209,209,32)"/><text x="65.7471%" y="863.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.58%)</title><rect x="65.4971%" y="837" width="0.5848%" height="15" fill="rgb(221,70,22)"/><text x="65.7471%" y="847.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.58%)</title><rect x="65.4971%" y="821" width="0.5848%" height="15" fill="rgb(248,145,5)"/><text x="65.7471%" y="831.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.58%)</title><rect x="65.4971%" y="805" width="0.5848%" height="15" fill="rgb(226,116,26)"/><text x="65.7471%" y="815.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (1 samples, 0.58%)</title><rect x="65.4971%" y="789" width="0.5848%" height="15" fill="rgb(244,5,17)"/><text x="65.7471%" y="799.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (1 samples, 0.58%)</title><rect x="65.4971%" y="773" width="0.5848%" height="15" fill="rgb(252,159,33)"/><text x="65.7471%" y="783.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.58%)</title><rect x="65.4971%" y="757" width="0.5848%" height="15" fill="rgb(206,71,0)"/><text x="65.7471%" y="767.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.58%)</title><rect x="65.4971%" y="741" width="0.5848%" height="15" fill="rgb(233,118,54)"/><text x="65.7471%" y="751.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.58%)</title><rect x="65.4971%" y="725" width="0.5848%" height="15" fill="rgb(234,83,48)"/><text x="65.7471%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.58%)</title><rect x="65.4971%" y="709" width="0.5848%" height="15" fill="rgb(228,3,54)"/><text x="65.7471%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.58%)</title><rect x="65.4971%" y="693" width="0.5848%" height="15" fill="rgb(226,155,13)"/><text x="65.7471%" y="703.50"></text></g><g><title>serde::de::MapAccess::next_key (1 samples, 0.58%)</title><rect x="66.0819%" y="917" width="0.5848%" height="15" fill="rgb(241,28,37)"/><text x="66.3319%" y="927.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.58%)</title><rect x="66.0819%" y="901" width="0.5848%" height="15" fill="rgb(233,93,10)"/><text x="66.3319%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.58%)</title><rect x="66.0819%" y="885" width="0.5848%" height="15" fill="rgb(225,113,19)"/><text x="66.3319%" y="895.50"></text></g><g><title>&lt;mining_proxy::protocol::ethjson::_::&lt;impl serde::de::Deserialize for mining_proxy::protocol::ethjson::EthServerRootObject&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.58%)</title><rect x="66.0819%" y="869" width="0.5848%" height="15" fill="rgb(241,2,18)"/><text x="66.3319%" y="879.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.58%)</title><rect x="66.0819%" y="853" width="0.5848%" height="15" fill="rgb(228,207,21)"/><text x="66.3319%" y="863.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.58%)</title><rect x="66.0819%" y="837" width="0.5848%" height="15" fill="rgb(213,211,35)"/><text x="66.3319%" y="847.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.58%)</title><rect x="66.0819%" y="821" width="0.5848%" height="15" fill="rgb(209,83,10)"/><text x="66.3319%" y="831.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.58%)</title><rect x="66.0819%" y="805" width="0.5848%" height="15" fill="rgb(209,164,1)"/><text x="66.3319%" y="815.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.58%)</title><rect x="66.0819%" y="789" width="0.5848%" height="15" fill="rgb(213,184,43)"/><text x="66.3319%" y="799.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.58%)</title><rect x="66.0819%" y="773" width="0.5848%" height="15" fill="rgb(231,61,34)"/><text x="66.3319%" y="783.50"></text></g><g><title>[unknown] (14 samples, 8.19%)</title><rect x="59.6491%" y="1317" width="8.1871%" height="15" fill="rgb(235,75,3)"/><text x="59.8991%" y="1327.50">[unknown]</text></g><g><title>tokio::runtime::task::harness::poll_future (12 samples, 7.02%)</title><rect x="60.8187%" y="1301" width="7.0175%" height="15" fill="rgb(220,106,47)"/><text x="61.0687%" y="1311.50">tokio::ru..</text></g><g><title>std::panic::catch_unwind (12 samples, 7.02%)</title><rect x="60.8187%" y="1285" width="7.0175%" height="15" fill="rgb(210,196,33)"/><text x="61.0687%" y="1295.50">std::pani..</text></g><g><title>std::panicking::try (12 samples, 7.02%)</title><rect x="60.8187%" y="1269" width="7.0175%" height="15" fill="rgb(229,154,42)"/><text x="61.0687%" y="1279.50">std::pani..</text></g><g><title>std::panicking::try::do_call (12 samples, 7.02%)</title><rect x="60.8187%" y="1253" width="7.0175%" height="15" fill="rgb(228,114,26)"/><text x="61.0687%" y="1263.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 7.02%)</title><rect x="60.8187%" y="1237" width="7.0175%" height="15" fill="rgb(208,144,1)"/><text x="61.0687%" y="1247.50">&lt;core::pa..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (12 samples, 7.02%)</title><rect x="60.8187%" y="1221" width="7.0175%" height="15" fill="rgb(239,112,37)"/><text x="61.0687%" y="1231.50">tokio::ru..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (12 samples, 7.02%)</title><rect x="60.8187%" y="1205" width="7.0175%" height="15" fill="rgb(210,96,50)"/><text x="61.0687%" y="1215.50">tokio::ru..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (12 samples, 7.02%)</title><rect x="60.8187%" y="1189" width="7.0175%" height="15" fill="rgb(222,178,2)"/><text x="61.0687%" y="1199.50">tokio::lo..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (12 samples, 7.02%)</title><rect x="60.8187%" y="1173" width="7.0175%" height="15" fill="rgb(226,74,18)"/><text x="61.0687%" y="1183.50">tokio::ru..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 7.02%)</title><rect x="60.8187%" y="1157" width="7.0175%" height="15" fill="rgb(225,67,54)"/><text x="61.0687%" y="1167.50">&lt;core::fu..</text></g><g><title>mining_proxy::client::tcp::accept_tcp::{{closure}}::{{closure}} (12 samples, 7.02%)</title><rect x="60.8187%" y="1141" width="7.0175%" height="15" fill="rgb(251,92,32)"/><text x="61.0687%" y="1151.50">mining_pr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 7.02%)</title><rect x="60.8187%" y="1125" width="7.0175%" height="15" fill="rgb(228,149,22)"/><text x="61.0687%" y="1135.50">&lt;core::fu..</text></g><g><title>mining_proxy::client::tcp::transfer::{{closure}} (12 samples, 7.02%)</title><rect x="60.8187%" y="1109" width="7.0175%" height="15" fill="rgb(243,54,13)"/><text x="61.0687%" y="1119.50">mining_pr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 7.02%)</title><rect x="60.8187%" y="1093" width="7.0175%" height="15" fill="rgb(243,180,28)"/><text x="61.0687%" y="1103.50">&lt;core::fu..</text></g><g><title>mining_proxy::client::handle_tcp_pool_timer::{{closure}} (12 samples, 7.02%)</title><rect x="60.8187%" y="1077" width="7.0175%" height="15" fill="rgb(208,167,24)"/><text x="61.0687%" y="1087.50">mining_pr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 7.02%)</title><rect x="60.8187%" y="1061" width="7.0175%" height="15" fill="rgb(245,73,45)"/><text x="61.0687%" y="1071.50">&lt;core::fu..</text></g><g><title>mining_proxy::client::handle_tcp_timer::{{closure}} (12 samples, 7.02%)</title><rect x="60.8187%" y="1045" width="7.0175%" height="15" fill="rgb(237,203,48)"/><text x="61.0687%" y="1055.50">mining_pr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 7.02%)</title><rect x="60.8187%" y="1029" width="7.0175%" height="15" fill="rgb(211,197,16)"/><text x="61.0687%" y="1039.50">&lt;core::fu..</text></g><g><title>mining_proxy::client::handle_stream_timer::handle_stream::{{closure}} (12 samples, 7.02%)</title><rect x="60.8187%" y="1013" width="7.0175%" height="15" fill="rgb(243,99,51)"/><text x="61.0687%" y="1023.50">mining_pr..</text></g><g><title>serde_json::de::from_str (3 samples, 1.75%)</title><rect x="66.0819%" y="997" width="1.7544%" height="15" fill="rgb(215,123,29)"/><text x="66.3319%" y="1007.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 1.75%)</title><rect x="66.0819%" y="981" width="1.7544%" height="15" fill="rgb(239,186,37)"/><text x="66.3319%" y="991.50"></text></g><g><title>mining_proxy::protocol::ethjson::_::&lt;impl serde::de::Deserialize for mining_proxy::protocol::ethjson::EthServerRootObject&gt;::deserialize (3 samples, 1.75%)</title><rect x="66.0819%" y="965" width="1.7544%" height="15" fill="rgb(252,136,39)"/><text x="66.3319%" y="975.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 1.75%)</title><rect x="66.0819%" y="949" width="1.7544%" height="15" fill="rgb(223,213,32)"/><text x="66.3319%" y="959.50"></text></g><g><title>&lt;mining_proxy::protocol::ethjson::_::&lt;impl serde::de::Deserialize for mining_proxy::protocol::ethjson::EthServerRootObject&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3 samples, 1.75%)</title><rect x="66.0819%" y="933" width="1.7544%" height="15" fill="rgb(233,115,5)"/><text x="66.3319%" y="943.50"></text></g><g><title>serde::de::MapAccess::next_value (2 samples, 1.17%)</title><rect x="66.6667%" y="917" width="1.1696%" height="15" fill="rgb(207,226,44)"/><text x="66.9167%" y="927.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (2 samples, 1.17%)</title><rect x="66.6667%" y="901" width="1.1696%" height="15" fill="rgb(208,126,0)"/><text x="66.9167%" y="911.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.58%)</title><rect x="67.2515%" y="885" width="0.5848%" height="15" fill="rgb(244,66,21)"/><text x="67.5015%" y="895.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.58%)</title><rect x="67.2515%" y="869" width="0.5848%" height="15" fill="rgb(222,97,12)"/><text x="67.5015%" y="879.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.58%)</title><rect x="67.2515%" y="853" width="0.5848%" height="15" fill="rgb(219,213,19)"/><text x="67.5015%" y="863.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.58%)</title><rect x="67.2515%" y="837" width="0.5848%" height="15" fill="rgb(252,169,30)"/><text x="67.5015%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.58%)</title><rect x="67.2515%" y="821" width="0.5848%" height="15" fill="rgb(206,32,51)"/><text x="67.5015%" y="831.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.58%)</title><rect x="67.2515%" y="805" width="0.5848%" height="15" fill="rgb(250,172,42)"/><text x="67.5015%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.58%)</title><rect x="67.2515%" y="789" width="0.5848%" height="15" fill="rgb(209,34,43)"/><text x="67.5015%" y="799.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.58%)</title><rect x="67.2515%" y="773" width="0.5848%" height="15" fill="rgb(223,11,35)"/><text x="67.5015%" y="783.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.58%)</title><rect x="67.2515%" y="757" width="0.5848%" height="15" fill="rgb(251,219,26)"/><text x="67.5015%" y="767.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.58%)</title><rect x="67.2515%" y="741" width="0.5848%" height="15" fill="rgb(231,119,3)"/><text x="67.5015%" y="751.50"></text></g><g><title>std::io::stdio::set_output_capture (1 samples, 0.58%)</title><rect x="67.8363%" y="1205" width="0.5848%" height="15" fill="rgb(216,97,11)"/><text x="68.0863%" y="1215.50"></text></g><g><title>core::mem::drop (3 samples, 1.75%)</title><rect x="68.4211%" y="1077" width="1.7544%" height="15" fill="rgb(223,59,9)"/><text x="68.6711%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (3 samples, 1.75%)</title><rect x="68.4211%" y="1061" width="1.7544%" height="15" fill="rgb(233,93,31)"/><text x="68.6711%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (3 samples, 1.75%)</title><rect x="68.4211%" y="1045" width="1.7544%" height="15" fill="rgb(239,81,33)"/><text x="68.6711%" y="1055.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.75%)</title><rect x="68.4211%" y="1029" width="1.7544%" height="15" fill="rgb(213,120,34)"/><text x="68.6711%" y="1039.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 1.75%)</title><rect x="68.4211%" y="1013" width="1.7544%" height="15" fill="rgb(243,49,53)"/><text x="68.6711%" y="1023.50"></text></g><g><title>syscall (3 samples, 1.75%)</title><rect x="68.4211%" y="997" width="1.7544%" height="15" fill="rgb(247,216,33)"/><text x="68.6711%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="981" width="1.7544%" height="15" fill="rgb(226,26,14)"/><text x="68.6711%" y="991.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="965" width="1.7544%" height="15" fill="rgb(215,49,53)"/><text x="68.6711%" y="975.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="949" width="1.7544%" height="15" fill="rgb(245,162,40)"/><text x="68.6711%" y="959.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="933" width="1.7544%" height="15" fill="rgb(229,68,17)"/><text x="68.6711%" y="943.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="917" width="1.7544%" height="15" fill="rgb(213,182,10)"/><text x="68.6711%" y="927.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="901" width="1.7544%" height="15" fill="rgb(245,125,30)"/><text x="68.6711%" y="911.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="885" width="1.7544%" height="15" fill="rgb(232,202,2)"/><text x="68.6711%" y="895.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="68.4211%" y="869" width="1.7544%" height="15" fill="rgb(237,140,51)"/><text x="68.6711%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="69.5906%" y="853" width="0.5848%" height="15" fill="rgb(236,157,25)"/><text x="69.8406%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="69.5906%" y="837" width="0.5848%" height="15" fill="rgb(219,209,0)"/><text x="69.8406%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="69.5906%" y="821" width="0.5848%" height="15" fill="rgb(240,116,54)"/><text x="69.8406%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="69.5906%" y="805" width="0.5848%" height="15" fill="rgb(216,10,36)"/><text x="69.8406%" y="815.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.58%)</title><rect x="70.1754%" y="981" width="0.5848%" height="15" fill="rgb(222,72,44)"/><text x="70.4254%" y="991.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.58%)</title><rect x="70.1754%" y="965" width="0.5848%" height="15" fill="rgb(232,159,9)"/><text x="70.4254%" y="975.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.58%)</title><rect x="70.1754%" y="949" width="0.5848%" height="15" fill="rgb(210,39,32)"/><text x="70.4254%" y="959.50"></text></g><g><title>syscall (1 samples, 0.58%)</title><rect x="70.1754%" y="933" width="0.5848%" height="15" fill="rgb(216,194,45)"/><text x="70.4254%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="917" width="0.5848%" height="15" fill="rgb(218,18,35)"/><text x="70.4254%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="901" width="0.5848%" height="15" fill="rgb(207,83,51)"/><text x="70.4254%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="885" width="0.5848%" height="15" fill="rgb(225,63,43)"/><text x="70.4254%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="869" width="0.5848%" height="15" fill="rgb(207,57,36)"/><text x="70.4254%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="853" width="0.5848%" height="15" fill="rgb(216,99,33)"/><text x="70.4254%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="837" width="0.5848%" height="15" fill="rgb(225,42,16)"/><text x="70.4254%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="821" width="0.5848%" height="15" fill="rgb(220,201,45)"/><text x="70.4254%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="805" width="0.5848%" height="15" fill="rgb(225,33,4)"/><text x="70.4254%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="789" width="0.5848%" height="15" fill="rgb(224,33,50)"/><text x="70.4254%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="773" width="0.5848%" height="15" fill="rgb(246,198,51)"/><text x="70.4254%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.1754%" y="757" width="0.5848%" height="15" fill="rgb(205,22,4)"/><text x="70.4254%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.58%)</title><rect x="70.7602%" y="821" width="0.5848%" height="15" fill="rgb(206,3,8)"/><text x="71.0102%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.58%)</title><rect x="70.7602%" y="805" width="0.5848%" height="15" fill="rgb(251,23,15)"/><text x="71.0102%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.58%)</title><rect x="70.7602%" y="789" width="0.5848%" height="15" fill="rgb(252,88,28)"/><text x="71.0102%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.58%)</title><rect x="70.7602%" y="773" width="0.5848%" height="15" fill="rgb(212,127,14)"/><text x="71.0102%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.58%)</title><rect x="70.7602%" y="757" width="0.5848%" height="15" fill="rgb(247,145,37)"/><text x="71.0102%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.58%)</title><rect x="70.7602%" y="741" width="0.5848%" height="15" fill="rgb(209,117,53)"/><text x="71.0102%" y="751.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.58%)</title><rect x="70.7602%" y="725" width="0.5848%" height="15" fill="rgb(212,90,42)"/><text x="71.0102%" y="735.50"></text></g><g><title>__rdl_alloc (1 samples, 0.58%)</title><rect x="70.7602%" y="709" width="0.5848%" height="15" fill="rgb(218,164,37)"/><text x="71.0102%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.58%)</title><rect x="70.7602%" y="693" width="0.5848%" height="15" fill="rgb(246,65,34)"/><text x="71.0102%" y="703.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.58%)</title><rect x="70.7602%" y="677" width="0.5848%" height="15" fill="rgb(231,100,33)"/><text x="71.0102%" y="687.50"></text></g><g><title>__posix_memalign (1 samples, 0.58%)</title><rect x="70.7602%" y="661" width="0.5848%" height="15" fill="rgb(228,126,14)"/><text x="71.0102%" y="671.50"></text></g><g><title>_mid_memalign (1 samples, 0.58%)</title><rect x="70.7602%" y="645" width="0.5848%" height="15" fill="rgb(215,173,21)"/><text x="71.0102%" y="655.50"></text></g><g><title>_int_memalign (1 samples, 0.58%)</title><rect x="70.7602%" y="629" width="0.5848%" height="15" fill="rgb(210,6,40)"/><text x="71.0102%" y="639.50"></text></g><g><title>_int_malloc (1 samples, 0.58%)</title><rect x="70.7602%" y="613" width="0.5848%" height="15" fill="rgb(212,48,18)"/><text x="71.0102%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="597" width="0.5848%" height="15" fill="rgb(230,214,11)"/><text x="71.0102%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="581" width="0.5848%" height="15" fill="rgb(254,105,39)"/><text x="71.0102%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="565" width="0.5848%" height="15" fill="rgb(245,158,5)"/><text x="71.0102%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="549" width="0.5848%" height="15" fill="rgb(249,208,11)"/><text x="71.0102%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="533" width="0.5848%" height="15" fill="rgb(210,39,28)"/><text x="71.0102%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="517" width="0.5848%" height="15" fill="rgb(211,56,53)"/><text x="71.0102%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="501" width="0.5848%" height="15" fill="rgb(226,201,30)"/><text x="71.0102%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="70.7602%" y="485" width="0.5848%" height="15" fill="rgb(239,101,34)"/><text x="71.0102%" y="495.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3 samples, 1.75%)</title><rect x="70.1754%" y="1077" width="1.7544%" height="15" fill="rgb(226,209,5)"/><text x="70.4254%" y="1087.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 1.75%)</title><rect x="70.1754%" y="1061" width="1.7544%" height="15" fill="rgb(250,105,47)"/><text x="70.4254%" y="1071.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3 samples, 1.75%)</title><rect x="70.1754%" y="1045" width="1.7544%" height="15" fill="rgb(230,72,3)"/><text x="70.4254%" y="1055.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 1.75%)</title><rect x="70.1754%" y="1029" width="1.7544%" height="15" fill="rgb(232,218,39)"/><text x="70.4254%" y="1039.50"></text></g><g><title>parking_lot_core::parking_lot::park (3 samples, 1.75%)</title><rect x="70.1754%" y="1013" width="1.7544%" height="15" fill="rgb(248,166,6)"/><text x="70.4254%" y="1023.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (3 samples, 1.75%)</title><rect x="70.1754%" y="997" width="1.7544%" height="15" fill="rgb(247,89,20)"/><text x="70.4254%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 1.17%)</title><rect x="70.7602%" y="981" width="1.1696%" height="15" fill="rgb(248,130,54)"/><text x="71.0102%" y="991.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (2 samples, 1.17%)</title><rect x="70.7602%" y="965" width="1.1696%" height="15" fill="rgb(234,196,4)"/><text x="71.0102%" y="975.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 1.17%)</title><rect x="70.7602%" y="949" width="1.1696%" height="15" fill="rgb(250,143,31)"/><text x="71.0102%" y="959.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (2 samples, 1.17%)</title><rect x="70.7602%" y="933" width="1.1696%" height="15" fill="rgb(211,110,34)"/><text x="71.0102%" y="943.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (2 samples, 1.17%)</title><rect x="70.7602%" y="917" width="1.1696%" height="15" fill="rgb(215,124,48)"/><text x="71.0102%" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 1.17%)</title><rect x="70.7602%" y="901" width="1.1696%" height="15" fill="rgb(216,46,13)"/><text x="71.0102%" y="911.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__init (2 samples, 1.17%)</title><rect x="70.7602%" y="885" width="1.1696%" height="15" fill="rgb(205,184,25)"/><text x="71.0102%" y="895.50"></text></g><g><title>parking_lot_core::parking_lot::ThreadData::new (2 samples, 1.17%)</title><rect x="70.7602%" y="869" width="1.1696%" height="15" fill="rgb(228,1,10)"/><text x="71.0102%" y="879.50"></text></g><g><title>parking_lot_core::parking_lot::grow_hashtable (2 samples, 1.17%)</title><rect x="70.7602%" y="853" width="1.1696%" height="15" fill="rgb(213,116,27)"/><text x="71.0102%" y="863.50"></text></g><g><title>parking_lot_core::parking_lot::HashTable::new (2 samples, 1.17%)</title><rect x="70.7602%" y="837" width="1.1696%" height="15" fill="rgb(241,95,50)"/><text x="71.0102%" y="847.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.58%)</title><rect x="71.3450%" y="821" width="0.5848%" height="15" fill="rgb(238,48,32)"/><text x="71.5950%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.58%)</title><rect x="71.3450%" y="805" width="0.5848%" height="15" fill="rgb(235,113,49)"/><text x="71.5950%" y="815.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.58%)</title><rect x="71.3450%" y="789" width="0.5848%" height="15" fill="rgb(205,127,43)"/><text x="71.5950%" y="799.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.58%)</title><rect x="71.3450%" y="773" width="0.5848%" height="15" fill="rgb(250,162,2)"/><text x="71.5950%" y="783.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.58%)</title><rect x="71.3450%" y="757" width="0.5848%" height="15" fill="rgb(220,13,41)"/><text x="71.5950%" y="767.50"></text></g><g><title>[[vdso]] (1 samples, 0.58%)</title><rect x="71.3450%" y="741" width="0.5848%" height="15" fill="rgb(249,221,25)"/><text x="71.5950%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.58%)</title><rect x="71.9298%" y="997" width="0.5848%" height="15" fill="rgb(215,208,19)"/><text x="72.1798%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.58%)</title><rect x="71.9298%" y="981" width="0.5848%" height="15" fill="rgb(236,175,2)"/><text x="72.1798%" y="991.50"></text></g><g><title>std::panicking::try (1 samples, 0.58%)</title><rect x="71.9298%" y="965" width="0.5848%" height="15" fill="rgb(241,52,2)"/><text x="72.1798%" y="975.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.58%)</title><rect x="71.9298%" y="949" width="0.5848%" height="15" fill="rgb(248,140,14)"/><text x="72.1798%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.58%)</title><rect x="71.9298%" y="933" width="0.5848%" height="15" fill="rgb(253,22,42)"/><text x="72.1798%" y="943.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.58%)</title><rect x="71.9298%" y="917" width="0.5848%" height="15" fill="rgb(234,61,47)"/><text x="72.1798%" y="927.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete::{{closure}} (1 samples, 0.58%)</title><rect x="71.9298%" y="901" width="0.5848%" height="15" fill="rgb(208,226,15)"/><text x="72.1798%" y="911.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join (1 samples, 0.58%)</title><rect x="71.9298%" y="885" width="0.5848%" height="15" fill="rgb(217,221,4)"/><text x="72.1798%" y="895.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.58%)</title><rect x="71.9298%" y="869" width="0.5848%" height="15" fill="rgb(212,174,34)"/><text x="72.1798%" y="879.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join::{{closure}} (1 samples, 0.58%)</title><rect x="71.9298%" y="853" width="0.5848%" height="15" fill="rgb(253,83,4)"/><text x="72.1798%" y="863.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (1 samples, 0.58%)</title><rect x="71.9298%" y="837" width="0.5848%" height="15" fill="rgb(250,195,49)"/><text x="72.1798%" y="847.50"></text></g><g><title>syscall (1 samples, 0.58%)</title><rect x="71.9298%" y="821" width="0.5848%" height="15" fill="rgb(241,192,25)"/><text x="72.1798%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="805" width="0.5848%" height="15" fill="rgb(208,124,10)"/><text x="72.1798%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="789" width="0.5848%" height="15" fill="rgb(222,33,0)"/><text x="72.1798%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="773" width="0.5848%" height="15" fill="rgb(234,209,28)"/><text x="72.1798%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="757" width="0.5848%" height="15" fill="rgb(224,11,23)"/><text x="72.1798%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="741" width="0.5848%" height="15" fill="rgb(232,99,1)"/><text x="72.1798%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="725" width="0.5848%" height="15" fill="rgb(237,95,45)"/><text x="72.1798%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="709" width="0.5848%" height="15" fill="rgb(208,109,11)"/><text x="72.1798%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="71.9298%" y="693" width="0.5848%" height="15" fill="rgb(216,190,48)"/><text x="72.1798%" y="703.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 2.92%)</title><rect x="72.5146%" y="565" width="2.9240%" height="15" fill="rgb(251,171,36)"/><text x="72.7646%" y="575.50">&lt;p..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (5 samples, 2.92%)</title><rect x="72.5146%" y="549" width="2.9240%" height="15" fill="rgb(230,62,22)"/><text x="72.7646%" y="559.50">pa..</text></g><g><title>syscall (5 samples, 2.92%)</title><rect x="72.5146%" y="533" width="2.9240%" height="15" fill="rgb(225,114,35)"/><text x="72.7646%" y="543.50">sy..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="72.5146%" y="517" width="2.9240%" height="15" fill="rgb(215,118,42)"/><text x="72.7646%" y="527.50">[u..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="72.5146%" y="501" width="2.9240%" height="15" fill="rgb(243,119,21)"/><text x="72.7646%" y="511.50">[u..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="72.5146%" y="485" width="2.9240%" height="15" fill="rgb(252,177,53)"/><text x="72.7646%" y="495.50">[u..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="72.5146%" y="469" width="2.9240%" height="15" fill="rgb(237,209,29)"/><text x="72.7646%" y="479.50">[u..</text></g><g><title>[unknown] (5 samples, 2.92%)</title><rect x="72.5146%" y="453" width="2.9240%" height="15" fill="rgb(212,65,23)"/><text x="72.7646%" y="463.50">[u..</text></g><g><title>[unknown] (4 samples, 2.34%)</title><rect x="73.0994%" y="437" width="2.3392%" height="15" fill="rgb(230,222,46)"/><text x="73.3494%" y="447.50">[..</text></g><g><title>[unknown] (4 samples, 2.34%)</title><rect x="73.0994%" y="421" width="2.3392%" height="15" fill="rgb(215,135,32)"/><text x="73.3494%" y="431.50">[..</text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="73.6842%" y="405" width="1.7544%" height="15" fill="rgb(246,101,22)"/><text x="73.9342%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="73.6842%" y="389" width="1.7544%" height="15" fill="rgb(206,107,13)"/><text x="73.9342%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="74.8538%" y="373" width="0.5848%" height="15" fill="rgb(250,100,44)"/><text x="75.1038%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="74.8538%" y="357" width="0.5848%" height="15" fill="rgb(231,147,38)"/><text x="75.1038%" y="367.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (6 samples, 3.51%)</title><rect x="72.5146%" y="677" width="3.5088%" height="15" fill="rgb(229,8,40)"/><text x="72.7646%" y="687.50">tok..</text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (6 samples, 3.51%)</title><rect x="72.5146%" y="661" width="3.5088%" height="15" fill="rgb(221,135,30)"/><text x="72.7646%" y="671.50">tok..</text></g><g><title>parking_lot::condvar::Condvar::wait (6 samples, 3.51%)</title><rect x="72.5146%" y="645" width="3.5088%" height="15" fill="rgb(249,193,18)"/><text x="72.7646%" y="655.50">par..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 3.51%)</title><rect x="72.5146%" y="629" width="3.5088%" height="15" fill="rgb(209,133,39)"/><text x="72.7646%" y="639.50">par..</text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 3.51%)</title><rect x="72.5146%" y="613" width="3.5088%" height="15" fill="rgb(232,100,14)"/><text x="72.7646%" y="623.50">par..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 3.51%)</title><rect x="72.5146%" y="597" width="3.5088%" height="15" fill="rgb(224,185,1)"/><text x="72.7646%" y="607.50">par..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (6 samples, 3.51%)</title><rect x="72.5146%" y="581" width="3.5088%" height="15" fill="rgb(223,139,8)"/><text x="72.7646%" y="591.50">par..</text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.58%)</title><rect x="75.4386%" y="565" width="0.5848%" height="15" fill="rgb(232,213,38)"/><text x="75.6886%" y="575.50"></text></g><g><title>parking_lot_core::parking_lot::hash (1 samples, 0.58%)</title><rect x="75.4386%" y="549" width="0.5848%" height="15" fill="rgb(207,94,22)"/><text x="75.6886%" y="559.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add (1 samples, 0.58%)</title><rect x="76.0234%" y="517" width="0.5848%" height="15" fill="rgb(219,183,54)"/><text x="76.2734%" y="527.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.17%)</title><rect x="76.0234%" y="597" width="1.1696%" height="15" fill="rgb(216,185,54)"/><text x="76.2734%" y="607.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.17%)</title><rect x="76.0234%" y="581" width="1.1696%" height="15" fill="rgb(254,217,39)"/><text x="76.2734%" y="591.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.17%)</title><rect x="76.0234%" y="565" width="1.1696%" height="15" fill="rgb(240,178,23)"/><text x="76.2734%" y="575.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.17%)</title><rect x="76.0234%" y="549" width="1.1696%" height="15" fill="rgb(218,11,47)"/><text x="76.2734%" y="559.50"></text></g><g><title>tokio::io::driver::Driver::turn (2 samples, 1.17%)</title><rect x="76.0234%" y="533" width="1.1696%" height="15" fill="rgb(218,51,51)"/><text x="76.2734%" y="543.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.58%)</title><rect x="76.6082%" y="517" width="0.5848%" height="15" fill="rgb(238,126,27)"/><text x="76.8582%" y="527.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1 samples, 0.58%)</title><rect x="76.6082%" y="501" width="0.5848%" height="15" fill="rgb(249,202,22)"/><text x="76.8582%" y="511.50"></text></g><g><title>epoll_wait (1 samples, 0.58%)</title><rect x="76.6082%" y="485" width="0.5848%" height="15" fill="rgb(254,195,49)"/><text x="76.8582%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="469" width="0.5848%" height="15" fill="rgb(208,123,14)"/><text x="76.8582%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="453" width="0.5848%" height="15" fill="rgb(224,200,8)"/><text x="76.8582%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="437" width="0.5848%" height="15" fill="rgb(217,61,36)"/><text x="76.8582%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="421" width="0.5848%" height="15" fill="rgb(206,35,45)"/><text x="76.8582%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="405" width="0.5848%" height="15" fill="rgb(217,65,33)"/><text x="76.8582%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="389" width="0.5848%" height="15" fill="rgb(222,158,48)"/><text x="76.8582%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="373" width="0.5848%" height="15" fill="rgb(254,2,54)"/><text x="76.8582%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="357" width="0.5848%" height="15" fill="rgb(250,143,38)"/><text x="76.8582%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="341" width="0.5848%" height="15" fill="rgb(248,25,0)"/><text x="76.8582%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="325" width="0.5848%" height="15" fill="rgb(206,152,27)"/><text x="76.8582%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="76.6082%" y="309" width="0.5848%" height="15" fill="rgb(240,77,30)"/><text x="76.8582%" y="319.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (4 samples, 2.34%)</title><rect x="77.1930%" y="597" width="2.3392%" height="15" fill="rgb(231,5,3)"/><text x="77.4430%" y="607.50">&lt;..</text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (3 samples, 1.75%)</title><rect x="77.7778%" y="581" width="1.7544%" height="15" fill="rgb(207,226,32)"/><text x="78.0278%" y="591.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park_timeout (3 samples, 1.75%)</title><rect x="77.7778%" y="565" width="1.7544%" height="15" fill="rgb(222,207,47)"/><text x="78.0278%" y="575.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (3 samples, 1.75%)</title><rect x="77.7778%" y="549" width="1.7544%" height="15" fill="rgb(229,115,45)"/><text x="78.0278%" y="559.50"></text></g><g><title>tokio::io::driver::Driver::turn (3 samples, 1.75%)</title><rect x="77.7778%" y="533" width="1.7544%" height="15" fill="rgb(224,191,6)"/><text x="78.0278%" y="543.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 1.17%)</title><rect x="78.3626%" y="517" width="1.1696%" height="15" fill="rgb(230,227,24)"/><text x="78.6126%" y="527.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (2 samples, 1.17%)</title><rect x="78.3626%" y="501" width="1.1696%" height="15" fill="rgb(228,80,19)"/><text x="78.6126%" y="511.50"></text></g><g><title>epoll_wait (2 samples, 1.17%)</title><rect x="78.3626%" y="485" width="1.1696%" height="15" fill="rgb(247,229,0)"/><text x="78.6126%" y="495.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="78.3626%" y="469" width="1.1696%" height="15" fill="rgb(237,194,15)"/><text x="78.6126%" y="479.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="78.3626%" y="453" width="1.1696%" height="15" fill="rgb(219,203,20)"/><text x="78.6126%" y="463.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="78.3626%" y="437" width="1.1696%" height="15" fill="rgb(234,128,8)"/><text x="78.6126%" y="447.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="78.3626%" y="421" width="1.1696%" height="15" fill="rgb(248,202,8)"/><text x="78.6126%" y="431.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="78.3626%" y="405" width="1.1696%" height="15" fill="rgb(206,104,37)"/><text x="78.6126%" y="415.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.58%)</title><rect x="79.5322%" y="581" width="0.5848%" height="15" fill="rgb(223,8,27)"/><text x="79.7822%" y="591.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (1 samples, 0.58%)</title><rect x="79.5322%" y="565" width="0.5848%" height="15" fill="rgb(216,217,28)"/><text x="79.7822%" y="575.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.58%)</title><rect x="79.5322%" y="549" width="0.5848%" height="15" fill="rgb(249,199,1)"/><text x="79.7822%" y="559.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (1 samples, 0.58%)</title><rect x="79.5322%" y="533" width="0.5848%" height="15" fill="rgb(240,85,17)"/><text x="79.7822%" y="543.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_occupied_slot (1 samples, 0.58%)</title><rect x="79.5322%" y="517" width="0.5848%" height="15" fill="rgb(206,108,45)"/><text x="79.7822%" y="527.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (8 samples, 4.68%)</title><rect x="76.0234%" y="661" width="4.6784%" height="15" fill="rgb(245,210,41)"/><text x="76.2734%" y="671.50">&lt;toki..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (8 samples, 4.68%)</title><rect x="76.0234%" y="645" width="4.6784%" height="15" fill="rgb(206,13,37)"/><text x="76.2734%" y="655.50">&lt;toki..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (8 samples, 4.68%)</title><rect x="76.0234%" y="629" width="4.6784%" height="15" fill="rgb(250,61,18)"/><text x="76.2734%" y="639.50">&lt;toki..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (8 samples, 4.68%)</title><rect x="76.0234%" y="613" width="4.6784%" height="15" fill="rgb(235,172,48)"/><text x="76.2734%" y="623.50">tokio..</text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (2 samples, 1.17%)</title><rect x="79.5322%" y="597" width="1.1696%" height="15" fill="rgb(249,201,17)"/><text x="79.7822%" y="607.50"></text></g><g><title>tokio::time::driver::ClockTime::now (1 samples, 0.58%)</title><rect x="80.1170%" y="581" width="0.5848%" height="15" fill="rgb(219,208,6)"/><text x="80.3670%" y="591.50"></text></g><g><title>tokio::time::clock::Clock::now (1 samples, 0.58%)</title><rect x="80.1170%" y="565" width="0.5848%" height="15" fill="rgb(248,31,23)"/><text x="80.3670%" y="575.50"></text></g><g><title>tokio::time::clock::now (1 samples, 0.58%)</title><rect x="80.1170%" y="549" width="0.5848%" height="15" fill="rgb(245,15,42)"/><text x="80.3670%" y="559.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.58%)</title><rect x="80.1170%" y="533" width="0.5848%" height="15" fill="rgb(222,217,39)"/><text x="80.3670%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.58%)</title><rect x="80.1170%" y="517" width="0.5848%" height="15" fill="rgb(210,219,27)"/><text x="80.3670%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.58%)</title><rect x="80.1170%" y="501" width="0.5848%" height="15" fill="rgb(252,166,36)"/><text x="80.3670%" y="511.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.58%)</title><rect x="80.1170%" y="485" width="0.5848%" height="15" fill="rgb(245,132,34)"/><text x="80.3670%" y="495.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.58%)</title><rect x="80.1170%" y="469" width="0.5848%" height="15" fill="rgb(236,54,3)"/><text x="80.3670%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (15 samples, 8.77%)</title><rect x="72.5146%" y="725" width="8.7719%" height="15" fill="rgb(241,173,43)"/><text x="72.7646%" y="735.50">tokio::runti..</text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (15 samples, 8.77%)</title><rect x="72.5146%" y="709" width="8.7719%" height="15" fill="rgb(215,190,9)"/><text x="72.7646%" y="719.50">&lt;tokio::runt..</text></g><g><title>tokio::runtime::park::Inner::park (15 samples, 8.77%)</title><rect x="72.5146%" y="693" width="8.7719%" height="15" fill="rgb(242,101,16)"/><text x="72.7646%" y="703.50">tokio::runti..</text></g><g><title>tokio::runtime::park::Inner::park_driver (9 samples, 5.26%)</title><rect x="76.0234%" y="677" width="5.2632%" height="15" fill="rgb(223,190,21)"/><text x="76.2734%" y="687.50">tokio:..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.58%)</title><rect x="80.7018%" y="661" width="0.5848%" height="15" fill="rgb(215,228,25)"/><text x="80.9518%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (1 samples, 0.58%)</title><rect x="81.2865%" y="725" width="0.5848%" height="15" fill="rgb(225,36,22)"/><text x="81.5365%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (1 samples, 0.58%)</title><rect x="81.8713%" y="725" width="0.5848%" height="15" fill="rgb(251,106,46)"/><text x="82.1213%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::is_parked (1 samples, 0.58%)</title><rect x="81.8713%" y="709" width="0.5848%" height="15" fill="rgb(208,90,1)"/><text x="82.1213%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.58%)</title><rect x="81.8713%" y="693" width="0.5848%" height="15" fill="rgb(243,10,4)"/><text x="82.1213%" y="703.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.58%)</title><rect x="81.8713%" y="677" width="0.5848%" height="15" fill="rgb(212,137,27)"/><text x="82.1213%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.58%)</title><rect x="81.8713%" y="661" width="0.5848%" height="15" fill="rgb(231,220,49)"/><text x="82.1213%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (18 samples, 10.53%)</title><rect x="72.5146%" y="741" width="10.5263%" height="15" fill="rgb(237,96,20)"/><text x="72.7646%" y="751.50">tokio::runtime:..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_parked (1 samples, 0.58%)</title><rect x="82.4561%" y="725" width="0.5848%" height="15" fill="rgb(239,229,30)"/><text x="82.7061%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_if_work_pending (1 samples, 0.58%)</title><rect x="82.4561%" y="709" width="0.5848%" height="15" fill="rgb(219,65,33)"/><text x="82.7061%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.58%)</title><rect x="82.4561%" y="693" width="0.5848%" height="15" fill="rgb(243,134,7)"/><text x="82.7061%" y="703.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (26 samples, 15.20%)</title><rect x="68.4211%" y="1093" width="15.2047%" height="15" fill="rgb(216,177,54)"/><text x="68.6711%" y="1103.50">tokio::runtime::blockin..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (20 samples, 11.70%)</title><rect x="71.9298%" y="1077" width="11.6959%" height="15" fill="rgb(211,160,20)"/><text x="72.1798%" y="1087.50">tokio::runtime::b..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (20 samples, 11.70%)</title><rect x="71.9298%" y="1061" width="11.6959%" height="15" fill="rgb(239,85,39)"/><text x="72.1798%" y="1071.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (20 samples, 11.70%)</title><rect x="71.9298%" y="1045" width="11.6959%" height="15" fill="rgb(232,125,22)"/><text x="72.1798%" y="1055.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::task::raw::poll (20 samples, 11.70%)</title><rect x="71.9298%" y="1029" width="11.6959%" height="15" fill="rgb(244,57,34)"/><text x="72.1798%" y="1039.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (20 samples, 11.70%)</title><rect x="71.9298%" y="1013" width="11.6959%" height="15" fill="rgb(214,203,32)"/><text x="72.1798%" y="1023.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (19 samples, 11.11%)</title><rect x="72.5146%" y="997" width="11.1111%" height="15" fill="rgb(207,58,43)"/><text x="72.7646%" y="1007.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::harness::poll_future (19 samples, 11.11%)</title><rect x="72.5146%" y="981" width="11.1111%" height="15" fill="rgb(215,193,15)"/><text x="72.7646%" y="991.50">tokio::runtime::..</text></g><g><title>std::panic::catch_unwind (19 samples, 11.11%)</title><rect x="72.5146%" y="965" width="11.1111%" height="15" fill="rgb(232,15,44)"/><text x="72.7646%" y="975.50">std::panic::catc..</text></g><g><title>std::panicking::try (19 samples, 11.11%)</title><rect x="72.5146%" y="949" width="11.1111%" height="15" fill="rgb(212,3,48)"/><text x="72.7646%" y="959.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (19 samples, 11.11%)</title><rect x="72.5146%" y="933" width="11.1111%" height="15" fill="rgb(218,128,7)"/><text x="72.7646%" y="943.50">std::panicking::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (19 samples, 11.11%)</title><rect x="72.5146%" y="917" width="11.1111%" height="15" fill="rgb(226,216,39)"/><text x="72.7646%" y="927.50">&lt;core::panic::un..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (19 samples, 11.11%)</title><rect x="72.5146%" y="901" width="11.1111%" height="15" fill="rgb(243,47,51)"/><text x="72.7646%" y="911.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (19 samples, 11.11%)</title><rect x="72.5146%" y="885" width="11.1111%" height="15" fill="rgb(241,183,40)"/><text x="72.7646%" y="895.50">tokio::runtime::..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (19 samples, 11.11%)</title><rect x="72.5146%" y="869" width="11.1111%" height="15" fill="rgb(231,217,32)"/><text x="72.7646%" y="879.50">tokio::loom::std..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (19 samples, 11.11%)</title><rect x="72.5146%" y="853" width="11.1111%" height="15" fill="rgb(229,61,38)"/><text x="72.7646%" y="863.50">tokio::runtime::..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 11.11%)</title><rect x="72.5146%" y="837" width="11.1111%" height="15" fill="rgb(225,210,5)"/><text x="72.7646%" y="847.50">&lt;tokio::runtime:..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (19 samples, 11.11%)</title><rect x="72.5146%" y="821" width="11.1111%" height="15" fill="rgb(231,79,45)"/><text x="72.7646%" y="831.50">tokio::runtime::..</text></g><g><title>tokio::runtime::thread_pool::worker::run (19 samples, 11.11%)</title><rect x="72.5146%" y="805" width="11.1111%" height="15" fill="rgb(224,100,7)"/><text x="72.7646%" y="815.50">tokio::runtime::..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (19 samples, 11.11%)</title><rect x="72.5146%" y="789" width="11.1111%" height="15" fill="rgb(241,198,18)"/><text x="72.7646%" y="799.50">tokio::macros::s..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (19 samples, 11.11%)</title><rect x="72.5146%" y="773" width="11.1111%" height="15" fill="rgb(252,97,53)"/><text x="72.7646%" y="783.50">tokio::runtime::..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (19 samples, 11.11%)</title><rect x="72.5146%" y="757" width="11.1111%" height="15" fill="rgb(220,88,7)"/><text x="72.7646%" y="767.50">tokio::runtime::..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (1 samples, 0.58%)</title><rect x="83.0409%" y="741" width="0.5848%" height="15" fill="rgb(213,176,14)"/><text x="83.2909%" y="751.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.58%)</title><rect x="83.0409%" y="725" width="0.5848%" height="15" fill="rgb(246,73,7)"/><text x="83.2909%" y="735.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into2 (1 samples, 0.58%)</title><rect x="83.0409%" y="709" width="0.5848%" height="15" fill="rgb(245,64,36)"/><text x="83.2909%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.58%)</title><rect x="83.0409%" y="693" width="0.5848%" height="15" fill="rgb(245,80,10)"/><text x="83.2909%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.58%)</title><rect x="83.0409%" y="677" width="0.5848%" height="15" fill="rgb(232,107,50)"/><text x="83.2909%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.58%)</title><rect x="83.6257%" y="965" width="0.5848%" height="15" fill="rgb(253,3,0)"/><text x="83.8757%" y="975.50"></text></g><g><title>std::panic::catch_unwind (28 samples, 16.37%)</title><rect x="68.4211%" y="1205" width="16.3743%" height="15" fill="rgb(212,99,53)"/><text x="68.6711%" y="1215.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (28 samples, 16.37%)</title><rect x="68.4211%" y="1189" width="16.3743%" height="15" fill="rgb(249,111,54)"/><text x="68.6711%" y="1199.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (28 samples, 16.37%)</title><rect x="68.4211%" y="1173" width="16.3743%" height="15" fill="rgb(249,55,30)"/><text x="68.6711%" y="1183.50">std::panicking::try::do_c..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (28 samples, 16.37%)</title><rect x="68.4211%" y="1157" width="16.3743%" height="15" fill="rgb(237,47,42)"/><text x="68.6711%" y="1167.50">&lt;core::panic::unwind_safe..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (28 samples, 16.37%)</title><rect x="68.4211%" y="1141" width="16.3743%" height="15" fill="rgb(211,20,18)"/><text x="68.6711%" y="1151.50">std::thread::Builder::spa..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28 samples, 16.37%)</title><rect x="68.4211%" y="1125" width="16.3743%" height="15" fill="rgb(231,203,46)"/><text x="68.6711%" y="1135.50">std::sys_common::backtrac..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (28 samples, 16.37%)</title><rect x="68.4211%" y="1109" width="16.3743%" height="15" fill="rgb(237,142,3)"/><text x="68.6711%" y="1119.50">tokio::runtime::blocking:..</text></g><g><title>tokio::runtime::context::enter (2 samples, 1.17%)</title><rect x="83.6257%" y="1093" width="1.1696%" height="15" fill="rgb(241,107,1)"/><text x="83.8757%" y="1103.50"></text></g><g><title>tokio::runtime::context::try_enter (2 samples, 1.17%)</title><rect x="83.6257%" y="1077" width="1.1696%" height="15" fill="rgb(229,83,13)"/><text x="83.8757%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 1.17%)</title><rect x="83.6257%" y="1061" width="1.1696%" height="15" fill="rgb(241,91,40)"/><text x="83.8757%" y="1071.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 1.17%)</title><rect x="83.6257%" y="1045" width="1.1696%" height="15" fill="rgb(225,3,45)"/><text x="83.8757%" y="1055.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 1.17%)</title><rect x="83.6257%" y="1029" width="1.1696%" height="15" fill="rgb(244,223,14)"/><text x="83.8757%" y="1039.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (2 samples, 1.17%)</title><rect x="83.6257%" y="1013" width="1.1696%" height="15" fill="rgb(224,124,37)"/><text x="83.8757%" y="1023.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (2 samples, 1.17%)</title><rect x="83.6257%" y="997" width="1.1696%" height="15" fill="rgb(251,171,30)"/><text x="83.8757%" y="1007.50"></text></g><g><title>__cxa_thread_atexit_impl (2 samples, 1.17%)</title><rect x="83.6257%" y="981" width="1.1696%" height="15" fill="rgb(236,46,54)"/><text x="83.8757%" y="991.50"></text></g><g><title>__calloc (1 samples, 0.58%)</title><rect x="84.2105%" y="965" width="0.5848%" height="15" fill="rgb(245,213,5)"/><text x="84.4605%" y="975.50"></text></g><g><title>_int_malloc (1 samples, 0.58%)</title><rect x="84.2105%" y="949" width="0.5848%" height="15" fill="rgb(230,144,27)"/><text x="84.4605%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (3 samples, 1.75%)</title><rect x="84.7953%" y="1205" width="1.7544%" height="15" fill="rgb(220,86,6)"/><text x="85.0453%" y="1215.50"></text></g><g><title>__GI___prctl (3 samples, 1.75%)</title><rect x="84.7953%" y="1189" width="1.7544%" height="15" fill="rgb(240,20,13)"/><text x="85.0453%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1173" width="1.7544%" height="15" fill="rgb(217,89,34)"/><text x="85.0453%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1157" width="1.7544%" height="15" fill="rgb(229,13,5)"/><text x="85.0453%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1141" width="1.7544%" height="15" fill="rgb(244,67,35)"/><text x="85.0453%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1125" width="1.7544%" height="15" fill="rgb(221,40,2)"/><text x="85.0453%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1109" width="1.7544%" height="15" fill="rgb(237,157,21)"/><text x="85.0453%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1093" width="1.7544%" height="15" fill="rgb(222,94,11)"/><text x="85.0453%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1077" width="1.7544%" height="15" fill="rgb(249,113,6)"/><text x="85.0453%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 1.75%)</title><rect x="84.7953%" y="1061" width="1.7544%" height="15" fill="rgb(238,137,36)"/><text x="85.0453%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="85.9649%" y="1045" width="0.5848%" height="15" fill="rgb(210,102,26)"/><text x="86.2149%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="86.5497%" y="1109" width="1.1696%" height="15" fill="rgb(218,30,30)"/><text x="86.7997%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="86.5497%" y="1093" width="1.1696%" height="15" fill="rgb(214,67,26)"/><text x="86.7997%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="86.5497%" y="1077" width="1.1696%" height="15" fill="rgb(251,9,53)"/><text x="86.7997%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="86.5497%" y="1061" width="1.1696%" height="15" fill="rgb(228,204,25)"/><text x="86.7997%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="86.5497%" y="1045" width="1.1696%" height="15" fill="rgb(207,153,8)"/><text x="86.7997%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="86.5497%" y="1029" width="1.1696%" height="15" fill="rgb(242,9,16)"/><text x="86.7997%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="86.5497%" y="1013" width="1.1696%" height="15" fill="rgb(217,211,10)"/><text x="86.7997%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="87.1345%" y="997" width="0.5848%" height="15" fill="rgb(219,228,52)"/><text x="87.3845%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="87.1345%" y="981" width="0.5848%" height="15" fill="rgb(231,92,29)"/><text x="87.3845%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="87.1345%" y="965" width="0.5848%" height="15" fill="rgb(232,8,23)"/><text x="87.3845%" y="975.50"></text></g><g><title>__GI___mmap64 (13 samples, 7.60%)</title><rect x="87.7193%" y="1109" width="7.6023%" height="15" fill="rgb(216,211,34)"/><text x="87.9693%" y="1119.50">__GI___mma..</text></g><g><title>[unknown] (13 samples, 7.60%)</title><rect x="87.7193%" y="1093" width="7.6023%" height="15" fill="rgb(236,151,0)"/><text x="87.9693%" y="1103.50">[unknown]</text></g><g><title>[unknown] (13 samples, 7.60%)</title><rect x="87.7193%" y="1077" width="7.6023%" height="15" fill="rgb(209,168,3)"/><text x="87.9693%" y="1087.50">[unknown]</text></g><g><title>[unknown] (13 samples, 7.60%)</title><rect x="87.7193%" y="1061" width="7.6023%" height="15" fill="rgb(208,129,28)"/><text x="87.9693%" y="1071.50">[unknown]</text></g><g><title>[unknown] (13 samples, 7.60%)</title><rect x="87.7193%" y="1045" width="7.6023%" height="15" fill="rgb(229,78,22)"/><text x="87.9693%" y="1055.50">[unknown]</text></g><g><title>[unknown] (13 samples, 7.60%)</title><rect x="87.7193%" y="1029" width="7.6023%" height="15" fill="rgb(228,187,13)"/><text x="87.9693%" y="1039.50">[unknown]</text></g><g><title>[unknown] (10 samples, 5.85%)</title><rect x="89.4737%" y="1013" width="5.8480%" height="15" fill="rgb(240,119,24)"/><text x="89.7237%" y="1023.50">[unknow..</text></g><g><title>[unknown] (4 samples, 2.34%)</title><rect x="92.9825%" y="997" width="2.3392%" height="15" fill="rgb(209,194,42)"/><text x="93.2325%" y="1007.50">[..</text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="94.7368%" y="981" width="0.5848%" height="15" fill="rgb(247,200,46)"/><text x="94.9868%" y="991.50"></text></g><g><title>__GI___libc_malloc (16 samples, 9.36%)</title><rect x="86.5497%" y="1173" width="9.3567%" height="15" fill="rgb(218,76,16)"/><text x="86.7997%" y="1183.50">__GI___libc_m..</text></g><g><title>tcache_init.part.0 (16 samples, 9.36%)</title><rect x="86.5497%" y="1157" width="9.3567%" height="15" fill="rgb(225,21,48)"/><text x="86.7997%" y="1167.50">tcache_init.p..</text></g><g><title>arena_get2.part.0 (16 samples, 9.36%)</title><rect x="86.5497%" y="1141" width="9.3567%" height="15" fill="rgb(239,223,50)"/><text x="86.7997%" y="1151.50">arena_get2.pa..</text></g><g><title>new_heap (16 samples, 9.36%)</title><rect x="86.5497%" y="1125" width="9.3567%" height="15" fill="rgb(244,45,21)"/><text x="86.7997%" y="1135.50">new_heap</text></g><g><title>__GI_munmap (1 samples, 0.58%)</title><rect x="95.3216%" y="1109" width="0.5848%" height="15" fill="rgb(232,33,43)"/><text x="95.5716%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="95.3216%" y="1093" width="0.5848%" height="15" fill="rgb(209,8,3)"/><text x="95.5716%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="95.3216%" y="1077" width="0.5848%" height="15" fill="rgb(214,25,53)"/><text x="95.5716%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="95.3216%" y="1061" width="0.5848%" height="15" fill="rgb(254,186,54)"/><text x="95.5716%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="95.3216%" y="1045" width="0.5848%" height="15" fill="rgb(208,174,49)"/><text x="95.5716%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="95.3216%" y="1029" width="0.5848%" height="15" fill="rgb(233,191,51)"/><text x="95.5716%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="95.3216%" y="1013" width="0.5848%" height="15" fill="rgb(222,134,10)"/><text x="95.5716%" y="1023.50"></text></g><g><title>__pthread_attr_setaffinity_alias (1 samples, 0.58%)</title><rect x="95.9064%" y="1173" width="0.5848%" height="15" fill="rgb(230,226,20)"/><text x="96.1564%" y="1183.50"></text></g><g><title>__pthread_attr_extension (1 samples, 0.58%)</title><rect x="95.9064%" y="1157" width="0.5848%" height="15" fill="rgb(251,111,25)"/><text x="96.1564%" y="1167.50"></text></g><g><title>__calloc (1 samples, 0.58%)</title><rect x="95.9064%" y="1141" width="0.5848%" height="15" fill="rgb(224,40,46)"/><text x="96.1564%" y="1151.50"></text></g><g><title>_int_malloc (1 samples, 0.58%)</title><rect x="95.9064%" y="1125" width="0.5848%" height="15" fill="rgb(236,108,47)"/><text x="96.1564%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="96.4912%" y="1157" width="1.1696%" height="15" fill="rgb(234,93,0)"/><text x="96.7412%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 1.17%)</title><rect x="96.4912%" y="1141" width="1.1696%" height="15" fill="rgb(224,213,32)"/><text x="96.7412%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="97.0760%" y="1125" width="0.5848%" height="15" fill="rgb(251,11,48)"/><text x="97.3260%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="97.0760%" y="1109" width="0.5848%" height="15" fill="rgb(236,173,5)"/><text x="97.3260%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.58%)</title><rect x="97.0760%" y="1093" width="0.5848%" height="15" fill="rgb(230,95,12)"/><text x="97.3260%" y="1103.50"></text></g><g><title>__pthread_getattr_np (20 samples, 11.70%)</title><rect x="86.5497%" y="1189" width="11.6959%" height="15" fill="rgb(232,209,1)"/><text x="86.7997%" y="1199.50">__pthread_getattr..</text></g><g><title>__pthread_getaffinity_np (3 samples, 1.75%)</title><rect x="96.4912%" y="1173" width="1.7544%" height="15" fill="rgb(232,6,1)"/><text x="96.7412%" y="1183.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.58%)</title><rect x="97.6608%" y="1157" width="0.5848%" height="15" fill="rgb(210,224,50)"/><text x="97.9108%" y="1167.50"></text></g><g><title>std::sys::unix::thread::guard::current (21 samples, 12.28%)</title><rect x="86.5497%" y="1205" width="12.2807%" height="15" fill="rgb(228,127,35)"/><text x="86.7997%" y="1215.50">std::sys::unix::th..</text></g><g><title>pthread_self (1 samples, 0.58%)</title><rect x="98.2456%" y="1189" width="0.5848%" height="15" fill="rgb(245,102,45)"/><text x="98.4956%" y="1199.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.58%)</title><rect x="98.8304%" y="1109" width="0.5848%" height="15" fill="rgb(214,1,49)"/><text x="99.0804%" y="1119.50"></text></g><g><title>all (171 samples, 100%)</title><rect x="0.0000%" y="1349" width="100.0000%" height="15" fill="rgb(226,163,40)"/><text x="0.2500%" y="1359.50"></text></g><g><title>tokio-runtime-w (69 samples, 40.35%)</title><rect x="59.6491%" y="1333" width="40.3509%" height="15" fill="rgb(239,212,28)"/><text x="59.8991%" y="1343.50">tokio-runtime-w</text></g><g><title>__GI___clone (55 samples, 32.16%)</title><rect x="67.8363%" y="1317" width="32.1637%" height="15" fill="rgb(220,20,13)"/><text x="68.0863%" y="1327.50">__GI___clone</text></g><g><title>start_thread (55 samples, 32.16%)</title><rect x="67.8363%" y="1301" width="32.1637%" height="15" fill="rgb(210,164,35)"/><text x="68.0863%" y="1311.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (55 samples, 32.16%)</title><rect x="67.8363%" y="1285" width="32.1637%" height="15" fill="rgb(248,109,41)"/><text x="68.0863%" y="1295.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (55 samples, 32.16%)</title><rect x="67.8363%" y="1269" width="32.1637%" height="15" fill="rgb(238,23,50)"/><text x="68.0863%" y="1279.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (55 samples, 32.16%)</title><rect x="67.8363%" y="1253" width="32.1637%" height="15" fill="rgb(211,48,49)"/><text x="68.0863%" y="1263.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (55 samples, 32.16%)</title><rect x="67.8363%" y="1237" width="32.1637%" height="15" fill="rgb(223,36,21)"/><text x="68.0863%" y="1247.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (55 samples, 32.16%)</title><rect x="67.8363%" y="1221" width="32.1637%" height="15" fill="rgb(207,123,46)"/><text x="68.0863%" y="1231.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::sys_common::thread_info::set (2 samples, 1.17%)</title><rect x="98.8304%" y="1205" width="1.1696%" height="15" fill="rgb(240,218,32)"/><text x="99.0804%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 1.17%)</title><rect x="98.8304%" y="1189" width="1.1696%" height="15" fill="rgb(252,5,43)"/><text x="99.0804%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 1.17%)</title><rect x="98.8304%" y="1173" width="1.1696%" height="15" fill="rgb(252,84,19)"/><text x="99.0804%" y="1183.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (2 samples, 1.17%)</title><rect x="98.8304%" y="1157" width="1.1696%" height="15" fill="rgb(243,152,39)"/><text x="99.0804%" y="1167.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::register_dtor (2 samples, 1.17%)</title><rect x="98.8304%" y="1141" width="1.1696%" height="15" fill="rgb(234,160,15)"/><text x="99.0804%" y="1151.50"></text></g><g><title>__cxa_thread_atexit_impl (2 samples, 1.17%)</title><rect x="98.8304%" y="1125" width="1.1696%" height="15" fill="rgb(237,34,20)"/><text x="99.0804%" y="1135.50"></text></g><g><title>__GI__dl_find_dso_for_object (1 samples, 0.58%)</title><rect x="99.4152%" y="1109" width="0.5848%" height="15" fill="rgb(229,97,13)"/><text x="99.6652%" y="1119.50"></text></g><g><title>_dl_addr_inside_object (1 samples, 0.58%)</title><rect x="99.4152%" y="1093" width="0.5848%" height="15" fill="rgb(234,71,50)"/><text x="99.6652%" y="1103.50"></text></g></svg></svg>